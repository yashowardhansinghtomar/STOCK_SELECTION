version: "3.8"

services:
  # ───────────────────────────────
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 0809
      POSTGRES_DB: trading_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  # ───────────────────────────────
  redis:
    image: redis:7
    ports:
      - "6380:6379"
    hostname: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 10

  # ───────────────────────────────
  feature_worker:
    build:
      context: .
      dockerfile: redis_worker/Dockerfile
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - .:/app
    working_dir: /app/redis_worker
    command: ["python", "worker.py"]

  # ───────────────────────────────
  odin:
    build:
      context: .
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    working_dir: /app
    command: sleep infinity
    restart: unless-stopped

  # ───────────────────────────────
  odin-dev:
    build:
      context: .
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - .:/app
    working_dir: /app
    command: sleep infinity
    restart: unless-stopped

volumes:
  postgres_data:
