Project Summary for: Y:\Trading\stock_selection

🧠 Data Access Points:
• aad.py → load_data('recommendations', source_dest=default)
• aad.py → load_data('stock_features_day', source_dest=default)
• debug_merge_issue.py → load_data(RECS_TABLE, source_dest=default)
• debug_merge_issue.py → load_data(FEATURE_TABLE, source_dest=default)
• inspect_feature_dates.py → load_data('stock_features_day', source_dest=default)
• agents\joint_policy_runner.py → load_data(settings.tables.recommendations, source_dest=default)
• agents\missed_trade_logger.py → load_data(settings.tables.recommendations, source_dest=default)
• agents\missed_trade_logger.py → load_data(settings.tables.trades, source_dest=default)
• agents\portfolio_allocator.py → load_data(settings.tables.open_positions, source_dest=default)
• agents\time_series_agent.py → load_data(settings.price_history_table, source_dest=default)
• agents\execution\execution_agent_sql.py → load_data(name, source_dest=default)
• agents\memory\feedback_loop.py → load_data(settings.tables.trades, source_dest=default)
• agents\memory\feedback_loop.py → save_data(final_df, source_dest=default)
• agents\memory\memory_agent.py → load_data(settings.tables.trades, source_dest=default)
• agents\memory\memory_agent.py → load_data(settings.tables.trades, source_dest=default)
• agents\memory\memory_agent.py → load_data(settings.tables.training_data, source_dest=default)
• agents\planner\intraday_planner_agent.py → load_data(settings.ml_selected_stocks_table, source_dest=default)
• agents\planner\intraday_planner_agent.py → load_data(settings.tables.open_positions, source_dest=default)
• agents\planner\planner_agent_sql.py → load_data(settings.fundamentals_table, source_dest=default)
• agents\planner\planner_agent_sql.py → load_data(settings.tables.instruments, source_dest=default)
• agents\planner\planner_agent_sql.py → load_data(settings.feature_table, source_dest=default)
• agents\planner\planner_agent_sql.py → load_data(settings.ml_selected_stocks_table, source_dest=default)
• agents\planner\planner_agent_sql.py → load_data(settings.ml_selected_stocks_table, source_dest=default)
• agents\planner\planner_agent_sql.py → load_data(self.skiplist_table, source_dest=default)
• agents\strategy\strategy_agent_old.py → load_data(settings.tables.recommendations, source_dest=default)
• agents\strategy\strategy_agent_old.py → load_data('stock_price_history', source_dest=default)
• agents\strategy\predictive_trader\backtest_lstm_predictor.py → load_data('stock_features', source_dest=default)
• agents\strategy\predictive_trader\curve_signal_generator.py → load_data(CURVE_TABLE, source_dest=default)
• agents\strategy\predictive_trader\model_manager.py → load_data('stock_price_history', source_dest=default)
• agents\strategy\predictive_trader\price_predictor_lgbm.py → load_data('stock_price_history', source_dest=default)
• agents\strategy\predictive_trader\price_predictor_lstm.py → load_data('stock_price_history', source_dest=default)
• agents\strategy\predictive_trader\price_predictor_lstm_v2.py → load_data('stock_features', source_dest=default)
• agents\strategy\predictive_trader\price_predictor_lstm_v2.py → load_data('stock_features', source_dest=default)
• analysis\joint_policy_comparator.py → load_data('trades', source_dest=default)
• analysis\joint_policy_comparator.py → load_data('joint_policy_predictions', source_dest=default)
• bootstrap\bootstrap_filter_training_data.py → save_data(df, source_dest=default)
• core\model_io.py → load_data(settings.tables.model_store, source_dest=default)
• core\system_state.py → load_data(settings.price_history_table, source_dest=default)
• core\system_state.py → load_data(settings.tables.recommendations, source_dest=default)
• core\system_state.py → load_data(settings.tables.trades, source_dest=default)
• core\system_state.py → load_data(settings.tables.open_positions, source_dest=default)
• core\system_state.py → load_data(table, source_dest=default)
• core\data_provider\data_provider.py → save_data(df, source_dest=default)
• core\data_provider\data_provider.py → save_data(df, source_dest=default)
• core\data_provider\data_provider.py → save_data(down, source_dest=default)
• core\data_provider\fundamentals\fundamental_data_extractor.py → load_data(TABLE_NAME, source_dest=default)
• core\data_provider\fundamentals\fundamental_data_extractor.py → save_data(df, source_dest=default)
• core\data_provider\processing\data_pipeline\zerodha_to_postgres.py → load_data(INSTRUMENTS_TABLE, source_dest=default)
• core\data_provider\processing\data_pipeline\zerodha_to_postgres.py → save_data(df, source_dest=default)
• core\feature_engineering\feature_provider.py → load_data(MISSING_ARG, source_dest=default)
• core\feature_engineering\feature_provider_old.py → load_data(UNKNOWN_EXPR, source_dest=default)
• core\filtering\run_filter.py → load_data(PREDICTION_TABLE, source_dest=default)
• diagnosis\evaluate_model_curves.py → load_data(CURVE_TABLE, source_dest=default)
• diagnosis\evaluate_model_curves.py → load_data(PRICE_TABLE, source_dest=default)
• diagnosis\view_predicted_curves.py → load_data(CURVE_TABLE, source_dest=default)
• diagnosis\view_predicted_curves.py → load_data(PRICE_TABLE, source_dest=default)
• flows\auto_pipeline.py → load_data(settings.fundamentals_table, source_dest=default)
• flows\auto_pipeline.py → load_data(settings.ml_selected_stocks_table, source_dest=default)
• flows\auto_pipeline.py → save_data(UNKNOWN_EXPR, source_dest=default)
• flows\backfill_1m_features_flow.py → save_data(enriched, source_dest=default)
• flows\fundamental_pipeline.py → save_data(df, source_dest=default)
• flows\fundamental_pipeline.py → load_data(TABLE_NAME, source_dest=default)
• flows\fundamental_pipeline.py → load_data(TABLE_NAME, source_dest=default)
• flows\trading_pipeline.py → load_data(ticker, source_dest=default)
• flows\trading_pipeline.py → load_data(ticker, source_dest=default)
• models\meta_strategy_selector.py → save_data(UNKNOWN_EXPR, source_dest=default)
• models\ml_dual_model_prediction_sql.py → load_data(data_path, source_dest=default)
• models\ml_dual_model_prediction_sql.py → load_data(feature_path, source_dest=default)
• models\ml_training_sql.py → load_data(settings.meta_training_table, source_dest=default)
• models\ml_training_sql.py → save_data(UNKNOWN_EXPR, source_dest=default)
• models\run_stock_filter.py → load_data(FEATURE_TABLE, source_dest=default)
• models\run_stock_filter.py → save_data(results, source_dest=default)
• models\train_dual_model_sql.py → load_data(df_name, source_dest=default)
• models\train_entry_exit_model.py → load_data(settings.meta_training_table, source_dest=default)
• models\train_entry_exit_model.py → save_data(UNKNOWN_EXPR, source_dest=default)
• models\train_exit_model.py → load_data(settings.trades_table, source_dest=default)
• models\train_meta_model.py → load_data(settings.meta_training_table, source_dest=default)
• models\train_meta_model.py → save_data(UNKNOWN_EXPR, source_dest=default)
• models\train_stock_filter_model.py → save_data(UNKNOWN_EXPR, source_dest=default)
• models\train_stock_filter_model.py → load_data(RECS_TABLE, source_dest=default)
• models\train_stock_filter_model.py → load_data(FEATURE_TABLE, source_dest=default)
• reports\daily_snapshot.py → load_data(TABLE_NAME, source_dest=default)
• scripts\load_backup_fundamentals.py → save_data(df, source_dest=default)
• scripts\seed_training_data.py → load_data('stock_features', source_dest=default)
• scripts\seed_training_data.py → load_data('paper_trades', source_dest=default)
• scripts\seed_training_data.py → save_data(df, source_dest=default)
• scripts\__archive__\execution_agent.py → load_data('recommendations', source_dest=default)
• scripts\__archive__\execution_agent.py → load_data('open_positions', source_dest=default)
• scripts\__archive__\execution_agent.py → save_data(open_positions, source_dest=default)
• scripts\__archive__\planner_agent.py → save_data(df, source_dest=default)
• scripts\__archive__\planner_agent.py → load_data('ml_selected_stocks', source_dest=default)
• stock_selecter\auto_filter_selector.py → load_data(settings.fundamentals_table, source_dest=default)
• stock_selecter\fallback_technical_filter.py → load_data(settings.feature_table, source_dest=default)
• stock_selecter\fallback_technical_filter.py → save_data(result, source_dest=default)
• stock_selecter\stock_screener.py → load_data(settings.fundamentals_table, source_dest=default)
• stock_selecter\stock_screener.py → save_data(out, source_dest=default)
• stock_selecter\stock_screener.py → load_data(settings.ml_selected_stocks_table, source_dest=default)
• training\train_joint_policy.py → load_data(settings.trades_table, source_dest=default)
• training\train_joint_policy.py → load_data(settings.tables.recommendations, source_dest=default)
• utils\precheck_features.py → load_data(stock, source_dest=default)
• utils\precheck_features.py → load_data(stock, source_dest=default)
• utils\stock_health_precheck.py → load_data(stock, source_dest=default)

📁 Code Structure Overview:
└── stock_selection
    ├── ODIN_phases_doc.md
    ├── RL_bootstrap_notes.md
    ├── aaa.py
    │   Imports:
    │     - core.data_provider.data_provider.fetch_stock_data
    ├── aab.py
    │   Imports:
    │     - argparse
    │     - ast
    │     - collections.Counter
    │     - collections.defaultdict
    │     - hashlib
    │     - json
    │     - os
    │     - re
    │     - time
    │   Function: load_config
    │   Function: attach_parents
    │   Function: compute_cyclomatic_complexity
    │   Function: get_docstring_info
    │   Function: hash_file_contents
    │   Function: get_qualified_call_name
    │   Function: extract_general_data_flow
    │   Function: extract_configured_io_calls
    │   Function: extract_db_tables_and_features
    │   Function: parse_python_file
    │   Function: scan_project
    │   Function: main
    ├── aad.py
    │   Imports:
    │     - core.data_provider.data_provider.load_data
    │     - pandas
    ├── agents
    │   ├── allocator_agent.py
    │   │   Imports:
    │   │     - core.logger.logger.logger
    │   │     - core.system_state.get_system_config
    │   │     - core.system_state.update_system_config
    │   │     - db.postgres_manager.run_query
    │   │   Class: AllocatorAgent
    │   │     Methods:
    │   │       - __init__
    │   │       - get_sharpe
    │   │       - get_current_allocation
    │   │       - set_current_allocation
    │   │       - run
    │   ├── arbitration
    │   │   └── signal_arbitration_agent.py
    │   │       Imports:
    │   │         - agents.replay_logger.log_replay_row
    │   │         - core.logger.logger.logger
    │   │         - predict.ppo_live_policy.PPOLivePolicy
    │   │       Class: SignalArbitrationAgent
    │   │         Methods:
    │   │           - __init__
    │   │           - arbitrate
    │   ├── execution
    │   │   ├── execution_agent_sql.py
    │   │   │   Imports:
    │   │   │     - agents.execution.trade_execution_helper.TradeExecutionHelper
    │   │   │     - bootstrap.trade_generator.Trade
    │   │   │     - core.config.config.FeatureGroupConfig
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.event_bus.publish_event
    │   │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.logger.system_logger.log_event
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - datetime.datetime
    │   │   │     - db.conflict_utils.insert_with_conflict_handling
    │   │   │     - db.postgres_manager.run_query
    │   │   │     - db.replay_buffer_sql.SQLReplayBuffer
    │   │   │     - json
    │   │   │     - os
    │   │   │     - pandas
    │   │   │     - services.exit_policy_evaluator.get_exit_probability
    │   │   │     - time
    │   │   │   Class: ExecutionAgentSQL
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - load_signals
    │   │   │       - load_open_positions
    │   │   │       - load_today_ohlc
    │   │   │       - exit_trades
    │   │   │       - enter_trades
    │   │   │       - publish_m2m_update
    │   │   │       - run
    │   │   │   Function: safe_load_table
    │   │   └── trade_execution_helper.py
    │   │       Imports:
    │   │         - bootstrap.simulate_trade_execution.simulate_trade_execution
    │   │         - core.broker_api.submit_order_live
    │   │         - db.replay_buffer_sql.SQLReplayBuffer
    │   │       Class: TradeExecutionHelper
    │   │         Methods:
    │   │           - __init__
    │   │           - execute
    │   │             Docstring:
    │   │               Execute a trade and compute result. Mode
    │   │               can be 'live' or 'sim'.
    │   │           - log_to_replay
    │   │             Docstring:
    │   │               Log trade to RL replay DB.
    │   ├── feedback_collector.py
    │   │   Imports:
    │   │     - core.event_bus.subscribe_to_events
    │   │     - core.logger.logger.logger
    │   │     - db.replay_buffer_sql.SQLReplayBuffer
    │   │   Function: handle_trade_close
    │   ├── joint_policy_runner.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.feature_engineering.feature_provider.fetch_features
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - datetime.datetime
    │   │     - db.conflict_utils.insert_with_conflict_handling
    │   │     - models.joint_policy.JointPolicyModel
    │   │     - pandas
    │   │   Function: run_joint_policy_predictions
    │   ├── memory
    │   │   ├── feedback_loop.py
    │   │   │   Imports:
    │   │   │     - core.config.config.FeatureGroupConfig
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.data_provider.data_provider.save_data
    │   │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - db.replay_buffer_sql.ReplayBuffer
    │   │   │     - json
    │   │   │     - pandas
    │   │   │     - pytz.timezone
    │   │   │   Function: parse_exit_field
    │   │   │   Function: update_training_data
    │   │   │   Function: compute_missed_profit
    │   │   │   Function: compute_holding_penalty
    │   │   └── memory_agent.py
    │   │       Imports:
    │   │         - agents.memory.feedback_loop.update_training_data
    │   │         - core.config.config.settings
    │   │         - core.data_provider.data_provider.load_data
    │   │         - core.logger.logger.logger
    │   │         - core.logger.system_logger.log_event
    │   │         - core.model_io.save_model
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - db.conflict_utils.insert_with_conflict_handling
    │   │         - db.postgres_manager.run_query
    │   │         - db.replay_buffer_sql.count_by_stock
    │   │         - models.meta_strategy_selector.train_meta_model
    │   │         - models.train_dual_model_sql.train_dual_model
    │   │         - models.train_exit_model.train_exit_model
    │   │         - models.train_stock_filter_model.train_stock_filter_model
    │   │         - pandas
    │   │         - rl.rl_finetune.finetune_rl
    │   │       Class: MemoryAgent
    │   │         Methods:
    │   │           - __init__
    │   │           - archive_table
    │   │           - summarize_weekly_performance
    │   │           - check_retraining_needed
    │   │           - feedback_loop
    │   │           - update
    │   │       Function: top_stocks_with_replay_data
    │   ├── missed_trade_logger.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.event_bus.publish_event
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - db.db.SessionLocal
    │   │     - pandas
    │   │   Function: simple_backtest_profit
    │   │     Docstring:
    │   │       A naive counterfactual: Buy at open, sell at close of
    │   │       the same day.
    │   │   Function: get_all_candidates
    │   │   Function: get_traded_today
    │   │   Function: run_missed_trade_logger
    │   ├── planner
    │   │   ├── intraday_planner_agent.py
    │   │   │   Imports:
    │   │   │     - agents.arbitration.signal_arbitration_agent.SignalArbitrationAgent
    │   │   │     - agents.execution.execution_agent_sql.ExecutionAgentSQL
    │   │   │     - agents.risk_management_agent.RiskManagementAgent
    │   │   │     - agents.strategy.rl_strategy_agent.RLStrategyAgent
    │   │   │     - agents.strategy.strategy_agent.StrategyAgent
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.model_io.insert_with_conflict_handling
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - os
    │   │   │     - pandas
    │   │   │     - random
    │   │   │     - redis
    │   │   │     - time
    │   │   │     - tqdm.tqdm
    │   │   │   Class: IntradayPlannerAgent
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - _fetch_updated_symbols
    │   │   │       - _fallback_poll
    │   │   │       - _process_symbols
    │   │   │       - run
    │   │   │       - run_forever
    │   │   ├── planner_agent_sql.py
    │   │   │   Imports:
    │   │   │     - agents.arbitration.signal_arbitration_agent.SignalArbitrationAgent
    │   │   │     - agents.execution.execution_agent_sql.ExecutionAgentSQL
    │   │   │     - agents.memory.memory_agent.MemoryAgent
    │   │   │     - agents.risk_management_agent.RiskManagementAgent
    │   │   │     - agents.strategy.rl_strategy_agent.RLStrategyAgent
    │   │   │     - agents.strategy.strategy_agent.StrategyAgent
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.data_provider.data_provider.save_data
    │   │   │     - core.data_provider.fundamentals.fundamental_data_extractor
    │   │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.logger.system_logger.log_event
    │   │   │     - core.predict.predict_param_model.predict_param_config
    │   │   │     - core.predict.predictor.predict_dual_model
    │   │   │     - core.skiplist.skiplist.add_to_skiplist
    │   │   │     - core.skiplist.skiplist.is_in_skiplist
    │   │   │     - core.system_state.get_system_config
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - datetime.datetime
    │   │   │     - db.conflict_utils.insert_with_conflict_handling
    │   │   │     - db.db.SessionLocal
    │   │   │     - db.models.Base
    │   │   │     - db.postgres_manager.get_all_symbols
    │   │   │     - db.postgres_manager.run_query
    │   │   │     - models.joint_policy.JointPolicyModel
    │   │   │     - pandas
    │   │   │     - pytz
    │   │   │     - random
    │   │   │     - sqlalchemy.text
    │   │   │     - stock_selecter.auto_filter_selector.auto_select_filter
    │   │   │     - tqdm.tqdm
    │   │   │     - warnings
    │   │   │   Class: PlannerAgentSQL
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - run
    │   │   │       - _fetch_fundamentals
    │   │   │       - _fetch_price_history
    │   │   │       - _refresh_features
    │   │   │       - _filter_stocks
    │   │   │       - _evaluate_stocks
    │   │   │       - _execute_trades
    │   │   │       - _update_systems
    │   │   └── planner_router.py
    │   │       Imports:
    │   │         - agents.planner.intraday_planner_agent.IntradayPlannerAgent
    │   │         - agents.planner.planner_agent_sql.PlannerAgentSQL
    │   │         - core.logger.logger.logger
    │   │         - threading
    │   │         - time
    │   │       Function: run_daily_planner
    │   │       Function: run_intraday_loop
    │   │       Function: run_all_planners
    │   ├── portfolio
    │   ├── portfolio_allocator.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - datetime.datetime
    │   │     - pandas
    │   │   Class: PortfolioAllocatorAgent
    │   │     Methods:
    │   │       - __init__
    │   │       - load_open_positions
    │   │       - filter_signals
    │   ├── replay_logger.py
    │   │   Imports:
    │   │     - core.event_bus.subscribe_to_events
    │   │     - core.logger.logger.logger
    │   │     - db.db.SessionLocal
    │   │     - db.postgres_manager.run_query
    │   │     - db.replay_buffer_sql.SQLReplayBuffer
    │   │     - pandas
    │   │   Function: handle_event
    │   │   Function: log_replay_row
    │   │     Docstring:
    │   │       For logging rejected or skipped signals, e.g., during
    │   │       arbitration.
    │   ├── risk
    │   ├── risk_management_agent.py
    │   │   Imports:
    │   │     - agents.replay_logger.log_replay_row
    │   │     - core.logger.logger.logger
    │   │   Class: RiskManagementAgent
    │   │     Methods:
    │   │       - __init__
    │   │       - approve
    │   │         Docstring:
    │   │           Evaluate the signal against risk rules.
    │   │           Returns True if trade is allowed; False
    │   │           otherwise.
    │   │       - _log_reject
    │   ├── strategy
    │   │   ├── predictive_trader
    │   │   │   ├── A_tester.py
    │   │   │   │   Imports:
    │   │   │   │     - os
    │   │   │   │     - predictive_trader.price_predictor_lgbm.train_lgbm_model
    │   │   │   │     - predictive_trader.price_predictor_lstm.train_lstm_model
    │   │   │   │     - predictive_trader.trade_signal_generator.generate_signals_for_list
    │   │   │   ├── backtest_lstm_predictor.py
    │   │   │   │   Imports:
    │   │   │   │     - config.paths.PATHS
    │   │   │   │     - core.data_provider.data_provider.load_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - datetime.timedelta
    │   │   │   │     - numpy
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │     - predictive_trader.price_predictor_lstm_v2.FEATURE_WINDOW
    │   │   │   │     - predictive_trader.price_predictor_lstm_v2.FUTURE_OFFSET
    │   │   │   │     - predictive_trader.price_predictor_lstm_v2.predict_5day_return_v2
    │   │   │   │     - predictive_trader.price_predictor_lstm_v2.train_lstm_model_v2
    │   │   │   │   Function: backtest_lstm_predictor
    │   │   │   ├── curve_predictor.py
    │   │   │   │   Imports:
    │   │   │   │     - config.paths.PATHS
    │   │   │   │     - core.data_provider.data_provider.load_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │   │     - db.postgres_manager.insert_dataframe
    │   │   │   │     - db.postgres_manager.run_query
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │     - predictive_trader.price_predictor_lstm.predict_next_5days_lstm
    │   │   │   │     - predictive_trader.price_predictor_lstm.train_lstm_model
    │   │   │   │   Function: generate_curves_for_list
    │   │   │   ├── curve_signal_generator.py
    │   │   │   │   Imports:
    │   │   │   │     - core.data_provider.data_provider.load_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │   │     - db.db_router.insert_dataframe
    │   │   │   │     - db.db_router.run_query
    │   │   │   │     - pandas
    │   │   │   │   Function: generate_signals_from_curves
    │   │   │   ├── model_manager.py
    │   │   │   │   Imports:
    │   │   │   │     - config.paths.PATHS
    │   │   │   │     - core.data_provider.data_provider.load_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - datetime.datetime
    │   │   │   │     - joblib
    │   │   │   │     - numpy
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │     - sklearn.preprocessing.MinMaxScaler
    │   │   │   │     - tensorflow
    │   │   │   │     - tensorflow.keras.Input
    │   │   │   │     - tensorflow.keras.layers.Dense
    │   │   │   │     - tensorflow.keras.layers.LSTM
    │   │   │   │     - tensorflow.keras.models.Sequential
    │   │   │   │   Function: build_lstm_model
    │   │   │   │   Function: load_price_data
    │   │   │   │   Function: train_model_upto
    │   │   │   │   Function: load_model_for_date
    │   │   │   ├── price_predictor_lgbm.py
    │   │   │   │   Imports:
    │   │   │   │     - config.paths.PATHS
    │   │   │   │     - core.data_provider.data_provider.load_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - joblib
    │   │   │   │     - lightgbm
    │   │   │   │     - numpy
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │   Function: generate_features
    │   │   │   │   Function: compute_rsi
    │   │   │   │   Function: load_price_data
    │   │   │   │   Function: train_lgbm_model
    │   │   │   │   Function: predict_movement_lgbm
    │   │   │   ├── price_predictor_lstm.py
    │   │   │   │   Imports:
    │   │   │   │     - config.paths.PATHS
    │   │   │   │     - core.data_provider.data_provider.load_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │   │     - datetime.datetime
    │   │   │   │     - db.db_router.insert_dataframe
    │   │   │   │     - joblib
    │   │   │   │     - numpy
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │     - predictive_trader.model_manager.load_model_for_date
    │   │   │   │     - sklearn.preprocessing.MinMaxScaler
    │   │   │   │     - tensorflow
    │   │   │   │     - tensorflow.keras.Input
    │   │   │   │     - tensorflow.keras.layers.Dense
    │   │   │   │     - tensorflow.keras.layers.LSTM
    │   │   │   │     - tensorflow.keras.models.Sequential
    │   │   │   │   Function: build_lstm_model
    │   │   │   │   Function: load_price_data
    │   │   │   │   Function: train_lstm_model
    │   │   │   │   Function: predict_next_5days_lstm
    │   │   │   │   Function: save_5day_predictions
    │   │   │   ├── price_predictor_lstm_intraday.py
    │   │   │   │   Imports:
    │   │   │   │     - config.paths.PATHS
    │   │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - datetime.time
    │   │   │   │     - joblib
    │   │   │   │     - numpy
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │     - sklearn.preprocessing.MinMaxScaler
    │   │   │   │     - tensorflow.keras.Input
    │   │   │   │     - tensorflow.keras.layers.Dense
    │   │   │   │     - tensorflow.keras.layers.LSTM
    │   │   │   │     - tensorflow.keras.models.Sequential
    │   │   │   │     - tensorflow.keras.models.load_model
    │   │   │   │   Function: build_model
    │   │   │   │   Function: train_intraday_model
    │   │   │   │   Function: predict_intraday_return
    │   │   │   ├── price_predictor_lstm_v2.py
    │   │   │   │   Imports:
    │   │   │   │     - config.paths.PATHS
    │   │   │   │     - core.data_provider.data_provider.load_data
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - joblib
    │   │   │   │     - numpy
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │     - sklearn.preprocessing.MinMaxScaler
    │   │   │   │     - tensorflow.keras.Input
    │   │   │   │     - tensorflow.keras.layers.Dense
    │   │   │   │     - tensorflow.keras.layers.LSTM
    │   │   │   │     - tensorflow.keras.models.Sequential
    │   │   │   │     - tensorflow.keras.models.load_model
    │   │   │   │   Function: build_model
    │   │   │   │   Function: train_lstm_model_v2
    │   │   │   │   Function: predict_5day_return_v2
    │   │   │   └── trade_signal_generator.py
    │   │   │       Imports:
    │   │   │         - core.data_provider.data_provider.fetch_stock_data
    │   │   │         - core.logger.logger.logger
    │   │   │         - datetime.datetime
    │   │   │         - db.db_router.insert_dataframe
    │   │   │         - os
    │   │   │         - pandas
    │   │   │         - predictive_trader.price_predictor_lgbm.predict_movement_lgbm
    │   │   │         - predictive_trader.price_predictor_lstm.predict_next_close_lstm
    │   │   │         - predictive_trader.price_predictor_lstm.predict_next_n_days_lstm
    │   │   │       Function: generate_trade_signal
    │   │   │       Function: generate_signals_for_list
    │   │   ├── rl_strategy_agent.py
    │   │   │   Imports:
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.predict.rl_predictor.load_policy
    │   │   │     - core.predict.rl_predictor.load_rl_frame
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - numpy
    │   │   │     - pandas
    │   │   │     - rl.envs.trading_env.TradingEnv
    │   │   │     - stable_baselines3.common.vec_env.DummyVecEnv
    │   │   │   Class: RLStrategyAgent
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - _evaluate_reward
    │   │   │       - evaluate
    │   │   │       - generate_trades
    │   │   │         Docstring:
    │   │   │           Wrapper to produce a list of RL signals
    │   │   │           for bootstrap_trader. Calls evaluate()
    │   │   │           for each stock and returns only the non-
    │   │   │           None signals.
    │   │   ├── strategy_agent.py
    │   │   │   Imports:
    │   │   │     - agents.replay_logger.log_replay_row
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.predict.predictor.predict_dual_model
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - datetime.datetime
    │   │   │     - db.db.SessionLocal
    │   │   │     - db.models.StockFeatureDay
    │   │   │     - pandas
    │   │   │     - sqlalchemy.orm.Session
    │   │   │   Class: StrategyAgent
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - fetch_features
    │   │   │       - evaluate
    │   │   │       - log_summary
    │   │   └── strategy_agent_old.py
    │   │       Imports:
    │   │         - agents.strategy.rl_strategy_agent.RLStrategyAgent
    │   │         - agents.time_series_agent.TimeSeriesAgent
    │   │         - core.config.config.settings
    │   │         - core.data_provider.data_provider.load_data
    │   │         - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │         - core.logger.logger.logger
    │   │         - core.model_io.load_model
    │   │         - core.predict.predict_entry_exit_config.predict_entry_exit_config
    │   │         - core.predict.predictor.predict_dual_model
    │   │         - core.replay.replay_logger.log_replay_row
    │   │         - core.skiplist.skiplist.add_to_skiplist
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - datetime.datetime
    │   │         - db.db.SessionLocal
    │   │         - db.models.ParamModelPrediction
    │   │         - db.models.StockFeatureDay
    │   │         - pandas
    │   │         - random
    │   │         - sqlalchemy.orm.Session
    │   │         - traceback
    │   │       Class: StrategyAgent
    │   │         Methods:
    │   │           - __init__
    │   │           - fetch_features
    │   │           - evaluate
    │   │           - _handle_grid_fallback
    │   │           - log_summary
    │   │       Function: is_valid_for_model
    │   └── time_series_agent.py
    │       Imports:
    │         - core.config.config.settings
    │         - core.data_provider.data_provider.load_data
    │         - core.logger.logger.logger
    │         - core.model_io.load_model
    │         - core.model_io.save_model
    │         - datetime.timedelta
    │         - numpy
    │         - pandas
    │         - pmdarima.arima.ARIMA
    │         - traceback
    │         - warnings
    │       Class: TimeSeriesAgent
    │         Methods:
    │           - __init__
    │           - _get_hist
    │           - train_and_store
    │           - predict
    │       Function: warning_to_log
    ├── analysis
    │   └── joint_policy_comparator.py
    │       Imports:
    │         - core.data_provider.data_provider.load_data
    │         - core.logger.logger.logger
    │         - core.time_context.time_context.get_simulation_date
    │         - pandas
    │       Function: compare_joint_policy_vs_rf
    │       Function: classify
    ├── analyzer_config.json
    ├── audit_report.md
    ├── backfill_log.txt
    ├── bootstrap
    │   ├── bootstrap_filter_training_data.py
    │   │   Imports:
    │   │     - core.backtest_bt.run_backtest_config
    │   │     - core.config.strategy_config.ExitRule
    │   │     - core.config.strategy_config.StrategyConfig
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │     - core.logger.logger.logger
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │     - db.postgres_manager.get_all_symbols
    │   │     - db.postgres_manager.run_query
    │   │     - pandas
    │   │     - pandas_market_calendars
    │   │     - traceback
    │   │     - utils.time_utils.make_naive
    │   │   Function: get_strategy_config
    │   │   Function: label_from_backtest
    │   │   Function: bootstrap
    │   ├── bootstrap_precheck.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - db.postgres_manager.get_all_symbols
    │   │     - os
    │   │     - pandas
    │   │     - pathlib.Path
    │   │     - sqlalchemy.create_engine
    │   │     - sqlalchemy.text
    │   │   Function: check_model_path
    │   │   Function: check_database_connection
    │   │   Function: check_price_history
    │   │   Function: check_minute_data
    │   │   Function: check_replay_buffer_table
    │   │   Function: check_filter_stock_universe
    │   │   Function: main
    │   ├── bootstrap_trader.py
    │   │   Imports:
    │   │     - agents.execution.execution_agent_sql.ExecutionAgentSQL
    │   │     - agents.strategy.rl_strategy_agent.RLStrategyAgent
    │   │     - bootstrap.phase_controller.PhaseController
    │   │     - core.logger.logger.logger
    │   │     - core.market_conditions.get_volatility_regime
    │   │     - datetime.datetime
    │   │     - db.replay_buffer_sql.SQLReplayBuffer
    │   │     - db.replay_buffer_sql.policy_converged
    │   │     - models.run_stock_filter.run_stock_filter
    │   │     - pandas
    │   │   Function: run_bootstrap_trader
    │   ├── historical_bootstrap_runner.py
    │   │   Imports:
    │   │     - agents.execution.execution_agent_sql.ExecutionAgentSQL
    │   │     - bootstrap.phase_controller.PhaseController
    │   │     - bootstrap.simulate_trade_execution.simulate_trade_execution
    │   │     - core.config.config.settings
    │   │     - core.logger.logger.logger
    │   │     - core.market_calendar.get_trading_days
    │   │     - core.model_trainer.trainer.train_models
    │   │     - datetime.datetime
    │   │     - db.replay_buffer_sql.SQLReplayBuffer
    │   │     - models.run_stock_filter.run_stock_filter
    │   │     - numpy
    │   │     - pandas
    │   │     - random
    │   │   Function: run_historical_bootstrap
    │   ├── phase_controller.py
    │   │   Imports:
    │   │     - bootstrap.trade_generator.generate_model_based_trades
    │   │     - bootstrap.trade_generator.generate_random_trades
    │   │     - bootstrap.trade_generator.generate_rule_based_trades
    │   │     - core.market_conditions.get_volatility_regime
    │   │     - db.replay_buffer_sql.policy_converged
    │   │     - random
    │   │   Class: PhaseController
    │   │     Methods:
    │   │       - __init__
    │   │       - update_phase
    │   │       - generate_trades
    │   │       - get_source_label
    │   ├── regime_meta_controller.py
    │   │   Class: RegimeAdaptiveMetaController
    │   │     Methods:
    │   │       - __init__
    │   │       - update
    │   │         Docstring:
    │   │           Adjust epsilon and position size based on
    │   │           volatility regime and learning progress [0,
    │   │           1]
    │   │       - get_epsilon
    │   │       - get_position_size
    │   ├── run_bootstrap.py
    │   │   Imports:
    │   │     - argparse
    │   │     - bootstrap.historical_bootstrap_runner.run_historical_bootstrap
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - core.logger.logger.logger
    │   │     - core.market_calendar.is_market_holiday
    │   │     - datetime.datetime
    │   │     - db.db.SessionLocal
    │   │     - db.models.FilterModelPrediction
    │   │   Function: prefetch_minute_bars
    │   │   Function: main
    │   ├── run_full_bootstrap.py
    │   │   Imports:
    │   │     - bootstrap.bootstrap_trader.run_bootstrap_trader
    │   │     - bootstrap.phase_controller.PhaseController
    │   │     - bootstrap.run_bootstrap.main
    │   │     - core.logger.logger.logger
    │   │     - core.market_calendar.get_trading_days
    │   │     - core.model_trainer.trainer.train_models
    │   │     - datetime.datetime
    │   │     - db.db.SessionLocal
    │   │     - db.models.Recommendation
    │   │     - db.replay_buffer_sql.SQLReplayBuffer
    │   │     - db.replay_buffer_sql.policy_converged
    │   │     - os
    │   │     - subprocess
    │   │   Function: run_all
    │   │   Function: recommendations_exist
    │   ├── simulate_trade_execution.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - core.logger.logger.logger
    │   │     - core.realism_boosters.market_impact.estimate_market_impact
    │   │     - core.realism_boosters.slippage.calculate_slippage
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │     - pandas
    │   │     - random
    │   │     - utils.time_utils.make_naive
    │   │     - utils.time_utils.to_naive_utc
    │   │   Function: simulate_trade_execution
    │   │   Function: calculate_reward
    │   └── trade_generator.py
    │       Imports:
    │         - core.data_provider.data_provider.fetch_stock_data
    │         - core.data_provider.data_provider.get_last_close
    │         - core.logger.logger.logger
    │         - datetime.datetime
    │         - datetime.timedelta
    │         - random
    │         - utils.time_utils.make_naive
    │       Class: Trade
    │         Methods:
    │           - __init__
    │       Function: generate_random_trades
    │       Function: generate_rule_based_trades
    │       Function: generate_model_based_trades
    ├── breaking_the_cold_start.md
    ├── breaking_the_cold_start_plan.md
    ├── checkpoints
    │   └── ppo.pt
    ├── config
    │   ├── paths.py
    │   │   Imports:
    │   │     - pathlib.Path
    │   ├── sql_tables.py
    │   ├── system_config.json
    │   ├── system_config.py
    │   └── zerodha_token.json
    ├── core
    │   ├── __init__.py
    │   ├── backtest_bt.py
    │   │   Imports:
    │   │     - backtesting.Backtest
    │   │     - backtesting.Strategy
    │   │     - backtesting.lib.crossover
    │   │     - core.config.config.settings
    │   │     - core.config.strategy_config.ExitRule
    │   │     - core.config.strategy_config.StrategyConfig
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - datetime.timedelta
    │   │     - pandas
    │   │     - traceback
    │   │     - utils.time_utils.make_naive
    │   │     - utils.time_utils.make_naive_index
    │   │     - utils.time_utils.to_naive_utc
    │   │   Class: SMA_RSI_Exit
    │   │     Methods:
    │   │       - init
    │   │       - next
    │   │   Function: ta_sma
    │   │   Function: ta_rsi
    │   │   Function: run_backtest_config
    │   ├── broker_api.py
    │   │   Function: submit_order_live
    │   │     Docstring:
    │   │       Submits a live order if REAL_ORDER_MODE is enabled.
    │   │       Otherwise logs the order and returns a simulated
    │   │       response.
    │   ├── config
    │   │   ├── config.py
    │   │   │   Imports:
    │   │   │     - pathlib.Path
    │   │   │     - pydantic.BaseModel
    │   │   │     - pydantic.Field
    │   │   │     - pydantic.SecretStr
    │   │   │     - pydantic_settings.BaseSettings
    │   │   │     - typing.ClassVar
    │   │   │     - typing.Dict
    │   │   │     - typing.List
    │   │   │     - typing.Optional
    │   │   │     - typing.Tuple
    │   │   │   Class: RetrainConfig
    │   │   │   Class: StrategyDefaults
    │   │   │   Class: LoggingConfig
    │   │   │   Class: TableNames
    │   │   │   Class: FeatureGroupConfig
    │   │   │   Class: Settings
    │   │   │   Class: Config
    │   │   │   Function: get_feature_columns
    │   │   │   Function: get_feature_table
    │   │   └── strategy_config.py
    │   │       Imports:
    │   │         - pydantic.BaseModel
    │   │         - typing.Literal
    │   │         - typing.Optional
    │   │       Class: ExitRule
    │   │       Class: StrategyConfig
    │   ├── data_provider
    │   │   ├── data
    │   │   │   └── instruments.csv
    │   │   ├── data_cleaner.py
    │   │   │   Imports:
    │   │   │     - core.logger.logger.logger
    │   │   │     - pandas
    │   │   │   Function: normalize_columns
    │   │   │   Function: sanity_check_features
    │   │   ├── data_initializer.py
    │   │   │   Imports:
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.logger.logger.logger
    │   │   │     - db.conflict_utils.insert_with_conflict_handling
    │   │   │     - db.postgres_manager.read_table
    │   │   │     - integrations.zerodha_fetcher.fetch_historical_data
    │   │   │     - os
    │   │   │     - pandas
    │   │   │   Function: ensure_price_history_prefilled
    │   │   │     Docstring:
    │   │   │       Ensures price history is populated in SQL for
    │   │   │       selected stocks in stock_fundamentals. Uses
    │   │   │       whitelist if provided. Skips if enough data is
    │   │   │       already present.
    │   │   ├── data_provider.py
    │   │   │   Imports:
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.data_provider.downsample.downsample_ohlcv
    │   │   │     - core.logger.logger.logger
    │   │   │     - datetime.datetime
    │   │   │     - datetime.timedelta
    │   │   │     - db.conflict_utils.insert_with_conflict_handling
    │   │   │     - db.db.SessionLocal
    │   │   │     - db.db.engine
    │   │   │     - db.models.Base
    │   │   │     - db.models.FilterModelPrediction
    │   │   │     - db.models.Instrument
    │   │   │     - db.models.MLSelectedStock
    │   │   │     - db.models.OpenPosition
    │   │   │     - db.models.PaperTrade
    │   │   │     - db.models.ParamModelPrediction
    │   │   │     - db.models.PriceModelPrediction
    │   │   │     - db.models.Recommendation
    │   │   │     - db.models.SkiplistStock
    │   │   │     - db.models.StockEncoding
    │   │   │     - db.models.StockFeature15m
    │   │   │     - db.models.StockFeature1m
    │   │   │     - db.models.StockFeature60m
    │   │   │     - db.models.StockFeatureDay
    │   │   │     - db.models.StockFundamental
    │   │   │     - db.models.StockPriceHistory
    │   │   │     - integrations.zerodha_fetcher.MINIMUM_START_DATE
    │   │   │     - integrations.zerodha_fetcher.fetch_historical_data
    │   │   │     - pandas
    │   │   │     - pytz.timezone
    │   │   │     - sqlalchemy.inspect
    │   │   │     - typing.Any
    │   │   │     - typing.List
    │   │   │     - typing.Optional
    │   │   │     - utils.time_utils.ensure_df_naive_utc
    │   │   │     - utils.time_utils.make_naive
    │   │   │     - utils.time_utils.make_naive_index
    │   │   │     - utils.time_utils.to_naive_datetime
    │   │   │     - utils.time_utils.to_naive_utc
    │   │   │   Function: log_once
    │   │   │   Function: fetch_stock_data
    │   │   │   Function: save_data
    │   │   │   Function: load_data
    │   │   │   Function: get_last_close
    │   │   │   Function: list_partitions
    │   │   │   Function: ensure_price_table
    │   │   │   Function: cache_price
    │   │   ├── downsample.py
    │   │   │   Imports:
    │   │   │     - pandas
    │   │   │     - typing.Dict
    │   │   │   Function: downsample_ohlcv
    │   │   ├── fundamentals
    │   │   │   ├── EQUITY.csv
    │   │   │   ├── fundamental_data.csv
    │   │   │   └── fundamental_data_extractor.py
    │   │   │       Imports:
    │   │   │         - core.data_provider.data_provider.load_data
    │   │   │         - core.data_provider.data_provider.save_data
    │   │   │         - core.logger.logger.logger
    │   │   │         - pandas
    │   │   │       Function: load_backup_and_save
    │   │   │       Function: fetch_all
    │   │   ├── live
    │   │   │   ├── bar_generator.py
    │   │   │   │   Imports:
    │   │   │   │     - core.logger.logger.logger
    │   │   │   │     - datetime.datetime
    │   │   │   │     - json
    │   │   │   │     - os
    │   │   │   │     - pandas
    │   │   │   │     - pytz.timezone
    │   │   │   │     - redis
    │   │   │   │     - time
    │   │   │   │   Function: get_ticks
    │   │   │   │   Function: build_ohlcv
    │   │   │   │   Function: enqueue_feature_task
    │   │   │   │   Function: main
    │   │   │   └── tick_collector_redis.py
    │   │   │       Imports:
    │   │   │         - datetime.datetime
    │   │   │         - json
    │   │   │         - kiteconnect.KiteTicker
    │   │   │         - os
    │   │   │         - pytz.timezone
    │   │   │         - redis
    │   │   │       Function: on_ticks
    │   │   │       Function: on_connect
    │   │   │       Function: on_close
    │   │   │       Function: on_error
    │   │   │       Function: main
    │   │   ├── processing
    │   │   │   └── data_pipeline
    │   │   │       └── zerodha_to_postgres.py
    │   │   │           Imports:
    │   │   │             - core.data_provider.data_provider.load_data
    │   │   │             - core.data_provider.data_provider.save_data
    │   │   │             - core.logger.logger.logger
    │   │   │             - datetime.datetime
    │   │   │             - datetime.timedelta
    │   │   │             - db.postgres_manager.run_query
    │   │   │             - integrations.zerodha_fetcher.fetch_historical_data
    │   │   │             - os
    │   │   │             - pandas
    │   │   │             - time
    │   │   │           Function: load_stock_list
    │   │   │           Function: fetch_and_save_stock
    │   │   │           Function: main
    │   │   └── symbols.py
    │   │       Imports:
    │   │         - core.logger.logger.logger
    │   │         - core.skiplist.skiplist.get_skiplist
    │   │         - db.postgres_manager.get_all_symbols
    │   │       Function: get_usable_symbols
    │   ├── event_bus.py
    │   │   Imports:
    │   │     - datetime.datetime
    │   │     - json
    │   │     - redis
    │   │   Function: publish_event
    │   │   Function: subscribe_to_events
    │   ├── feature_engineering
    │   │   ├── backfill_features_from_existing_prices.py
    │   │   │   Imports:
    │   │   │     - concurrent.futures.ThreadPoolExecutor
    │   │   │     - concurrent.futures.as_completed
    │   │   │     - core.config.config.settings
    │   │   │     - core.feature_engineering.feature_provider.fetch_features_with_backfill
    │   │   │     - core.logger.logger.logger
    │   │   │     - db.postgres_manager.get_all_symbols
    │   │   │     - logging
    │   │   │     - os
    │   │   │     - tqdm.tqdm
    │   │   │   Function: backfill
    │   │   ├── feature_backfill_utils.py
    │   │   │   Imports:
    │   │   │     - core.feature_engineering.feature_provider.fetch_features
    │   │   │     - redis_worker.redis_utils.enqueue_feature_backfill
    │   │   │     - redis_worker.redis_utils.wait_for_feature_ready
    │   │   │   Function: fetch_features_with_backfill
    │   │   │     Docstring:
    │   │   │       Wrapper that ensures features are computed via
    │   │   │       Redis before fetching them.
    │   │   ├── feature_computer.py
    │   │   │   Imports:
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.feature_engineering.precompute_features.compute_features
    │   │   │     - core.logger.logger.logger
    │   │   │     - pandas
    │   │   │   Function: compute_and_prepare_features
    │   │   ├── feature_enricher.py
    │   │   │   Imports:
    │   │   │     - core.config.config.settings
    │   │   │     - core.logger.logger.logger
    │   │   │     - datetime.datetime
    │   │   │     - db.db.SessionLocal
    │   │   │     - pandas
    │   │   │     - sqlalchemy.sql.text
    │   │   │     - utils.time_utils.to_naive_utc
    │   │   │   Function: enrich_features
    │   │   ├── feature_enricher_multi.py
    │   │   │   Imports:
    │   │   │     - core.feature_engineering.feature_enricher.enrich_features
    │   │   │     - datetime.datetime
    │   │   │     - pandas
    │   │   │   Function: enrich_multi_interval_features
    │   │   ├── feature_provider.py
    │   │   │   Imports:
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.feature_engineering.precompute_features.compute_features
    │   │   │     - core.feature_engineering.precompute_features.insert_feature_row
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.skiplist.skiplist.is_in_skiplist
    │   │   │     - datetime.date
    │   │   │     - datetime.datetime
    │   │   │     - datetime.timedelta
    │   │   │     - db.db.SessionLocal
    │   │   │     - pandas
    │   │   │     - sqlalchemy.sql.text
    │   │   │   Function: process_and_insert
    │   │   │   Function: fetch_features
    │   │   │   Function: fetch_features_with_backfill
    │   │   ├── feature_provider_old.py
    │   │   │   Imports:
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.feature_engineering.precompute_features.compute_features
    │   │   │     - core.feature_engineering.precompute_features.insert_feature_row
    │   │   │     - core.feature_engineering.regime_features.compute_regime_features
    │   │   │     - core.feature_store.feature_store.get_or_compute
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.skiplist.skiplist.is_in_skiplist
    │   │   │     - datetime.datetime
    │   │   │     - datetime.timedelta
    │   │   │     - db.db.SessionLocal
    │   │   │     - pandas
    │   │   │     - sqlalchemy.sql.text
    │   │   │   Function: process_and_insert
    │   │   │   Function: fetch_features
    │   │   │   Function: fetch_features_with_backfill
    │   │   ├── precompute_features.py
    │   │   │   Imports:
    │   │   │     - argparse
    │   │   │     - core.config.config.settings
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.time_context.time_context.get_stock_universe
    │   │   │     - datetime.datetime
    │   │   │     - datetime.timedelta
    │   │   │     - db.db.SessionLocal
    │   │   │     - pandas
    │   │   │     - sqlalchemy.sql.text
    │   │   │     - ta
    │   │   │     - utils.time_utils.to_naive_utc
    │   │   │   Function: compute_features
    │   │   │   Function: insert_feature_row
    │   │   │   Function: enrich_and_store
    │   │   └── regime_features.py
    │   │       Imports:
    │   │         - numpy
    │   │         - pandas
    │   │       Function: compute_regime_features
    │   │         Docstring:
    │   │           Compute volatility and trend signals to classify
    │   │           market regime. Returns a DataFrame with added
    │   │           regime tag columns.
    │   │       Function: classify_regime
    │   ├── feature_store
    │   │   └── feature_store.py
    │   │       Imports:
    │   │         - core.feature_engineering.feature_computer.compute_and_prepare_features
    │   │         - core.logger.logger.logger
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - duckdb
    │   │         - os
    │   │         - pandas
    │   │       Function: get_cached_features
    │   │       Function: insert_features
    │   │       Function: get_or_compute
    │   ├── filtering
    │   │   └── run_filter.py
    │   │       Imports:
    │   │         - core.config.config.settings
    │   │         - core.data_provider.data_provider.load_data
    │   │         - core.logger.logger.logger
    │   │         - datetime.datetime
    │   │         - models.run_stock_filter.run_stock_filter
    │   │         - pandas
    │   │       Function: run_filter_model
    │   │         Docstring:
    │   │           Get filtered stocks for a given date using trained
    │   │           filter model.  Args:     date (datetime): The
    │   │           target date to run filter for.     lookback_only
    │   │           (bool): Ignored for now, for compatibility.
    │   │           Returns:     list: List of stock symbols predicted
    │   │           as "buy".
    │   ├── logger
    │   │   ├── logger.py
    │   │   │   Imports:
    │   │   │     - core.config.config.settings
    │   │   │     - datetime.datetime
    │   │   │     - logging
    │   │   │     - os
    │   │   │     - re
    │   │   │     - sys
    │   │   │   Class: SafeFormatter
    │   │   │     Methods:
    │   │   │       - format
    │   │   │   Function: strip_surrogates
    │   │   │   Function: success
    │   │   │   Function: warnings
    │   │   │   Function: errors
    │   │   │   Function: start
    │   │   └── system_logger.py
    │   │       Imports:
    │   │         - core.logger.logger.logger
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - datetime.datetime
    │   │         - db.postgres_manager.insert_dataframe
    │   │         - db.postgres_manager.run_query
    │   │         - json
    │   │         - pandas
    │   │       Function: log_event
    │   ├── market_calendar.py
    │   │   Imports:
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │   Function: get_trading_days
    │   │     Docstring:
    │   │       Returns all weekdays (Mon-Fri) between start and end
    │   │       dates, inclusive.
    │   │   Function: is_market_holiday
    │   ├── market_conditions.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - numpy
    │   │   Function: get_volatility_regime
    │   │     Docstring:
    │   │       Classifies volatility regime using avg std dev of
    │   │       daily returns across top index-weighted stocks.
    │   ├── model_io.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - datetime.datetime
    │   │     - db.conflict_utils.insert_with_conflict_handling
    │   │     - db.postgres_manager.run_query
    │   │     - pandas
    │   │     - pickle
    │   │   Function: save_model
    │   │     Docstring:
    │   │       Serialize and save a model to the configured SQL table
    │   │       with optional metadata.
    │   │   Function: load_model
    │   │   Function: get_model_metadata
    │   │   Function: load_latest_model
    │   │     Docstring:
    │   │       Loads the most recent model from model_store that
    │   │       matches base_name prefix.
    │   ├── model_trainer
    │   │   └── trainer.py
    │   │       Imports:
    │   │         - core.logger.logger.logger
    │   │         - db.replay_buffer_sql.load_replay_episodes
    │   │         - joblib
    │   │         - lightgbm
    │   │         - pandas
    │   │       Function: train_models
    │   ├── notifications
    │   │   └── redis_notifier.py
    │   │       Imports:
    │   │         - redis.Redis
    │   │       Function: push_feature_ready
    │   │         Docstring:
    │   │           Push a symbol to the Redis queue to signal that
    │   │           features are ready.
    │   ├── policy
    │   │   ├── __init__.py
    │   │   │   Imports:
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.policy.rl_policy.RLPolicyModel
    │   │   │     - core.system_state.get_system_config
    │   │   │     - models.joint_policy.JointPolicyModel
    │   │   │     - pandas
    │   │   │   Function: choose_policy_model
    │   │   ├── rl_policy.py
    │   │   │   Imports:
    │   │   │     - core.logger.logger.logger
    │   │   │     - os
    │   │   │     - pandas
    │   │   │     - torch
    │   │   │   Class: RLPolicyModel
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - load
    │   │   │       - predict
    │   │   └── train_joint_from_replay.py
    │   │       Imports:
    │   │         - core.logger.logger.logger
    │   │         - core.model_io.save_model
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - db.postgres_manager.run_query
    │   │         - json
    │   │         - models.joint_policy.JointPolicyModel
    │   │         - pandas
    │   │       Function: load_replay_data
    │   │       Function: main
    │   ├── predict
    │   │   ├── grid_predictor.py
    │   │   │   Imports:
    │   │   │     - backtesting.backtesting
    │   │   │     - core.backtest_bt.run_backtest_config
    │   │   │     - core.config.strategy_config.ExitRule
    │   │   │     - core.config.strategy_config.StrategyConfig
    │   │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - datetime.datetime
    │   │   │     - db.postgres_manager.run_query
    │   │   │     - json
    │   │   │     - multiprocessing
    │   │   │     - pandas
    │   │   │   Function: predict_grid_config
    │   │   │   Function: persist_grid_recommendations
    │   │   ├── policy_chooser.py
    │   │   │   Imports:
    │   │   │     - agents.allocator_agent.AllocatorAgent
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.policy.policy_manager.choose_best_policy
    │   │   │     - core.system_state.get_system_config
    │   │   │     - core.system_state.update_system_config
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - db.postgres_manager.SessionLocal
    │   │   │     - db.postgres_manager.run_query
    │   │   │     - pandas
    │   │   │     - prefect.flow
    │   │   │     - sqlalchemy.Column
    │   │   │     - sqlalchemy.Date
    │   │   │     - sqlalchemy.Float
    │   │   │     - sqlalchemy.Integer
    │   │   │     - sqlalchemy.JSON
    │   │   │     - sqlalchemy.MetaData
    │   │   │     - sqlalchemy.String
    │   │   │     - sqlalchemy.TIMESTAMP
    │   │   │     - sqlalchemy.Table
    │   │   │     - sqlalchemy.insert
    │   │   │     - sqlalchemy.text
    │   │   │   Function: save_policy_choice
    │   │   │   Function: policy_chooser_flow
    │   │   │   Function: get_sharpe
    │   │   │   Function: policy_chooser
    │   │   │   Function: get_current_allocation
    │   │   │   Function: set_current_allocation
    │   │   ├── ppo_live_policy.py
    │   │   │   Imports:
    │   │   │     - core.feature_engineering.feature_provider.fetch_features
    │   │   │     - core.logger.logger.logger
    │   │   │     - numpy
    │   │   │     - pandas
    │   │   │     - stable_baselines3.PPO
    │   │   │   Class: PPOLivePolicy
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - predict
    │   │   ├── predict_entry_exit_config.py
    │   │   │   Imports:
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.model_io.load_model
    │   │   │     - numpy
    │   │   │     - pandas
    │   │   │   Function: predict_entry_exit_config
    │   │   ├── predict_param_model.py
    │   │   │   Imports:
    │   │   │     - core.config.config.settings
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.model_io.load_model
    │   │   │     - numpy
    │   │   │     - pandas
    │   │   │   Function: predict_param_config
    │   │   ├── predictor.py
    │   │   │   Imports:
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - models.joint_policy.JointPolicyModel
    │   │   │     - pandas
    │   │   │   Function: predict_dual_model
    │   │   │     Docstring:
    │   │   │       Predicts if a trade should be triggered and its
    │   │   │       expected return. Returns a list of dicts with
    │   │   │       unified format: [{    "stock": <symbol>,
    │   │   │       "trade_triggered": <0|1>,    "predicted_return":
    │   │   │       <float>,    "recommended_config": <dict>,
    │   │   │       "model_source": "joint" }]
    │   │   └── rl_predictor.py
    │   │       Imports:
    │   │         - core.config.config.settings
    │   │         - core.data_provider.data_provider.fetch_stock_data
    │   │         - core.data_provider.data_provider.load_data
    │   │         - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │         - core.logger.logger.logger
    │   │         - core.model_io.load_latest_model
    │   │         - core.model_io.load_model
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - numpy
    │   │         - pandas
    │   │         - rl.envs.trading_env.TradingEnv
    │   │         - stable_baselines3.PPO
    │   │         - stable_baselines3.common.vec_env.DummyVecEnv
    │   │       Function: load_policy
    │   │       Function: load_rl_frame
    │   │       Function: predict_action
    │   │       Function: predict_with_fallback
    │   ├── realism_boosters
    │   │   ├── market_impact.py
    │   │   │   Function: estimate_market_impact
    │   │   │     Docstring:
    │   │   │       Returns estimated market impact as a fraction of
    │   │   │       price (e.g., 0.002 means 0.2%) Placeholder logic:
    │   │   │       based on trade size.
    │   │   └── slippage.py
    │   │       Function: calculate_slippage
    │   │         Docstring:
    │   │           Returns estimated slippage as a fraction of price
    │   │           (e.g., 0.001 means 0.1%) Placeholder logic: fixed
    │   │           0.1% slippage for now.
    │   ├── rl
    │   │   ├── gym_env.py
    │   │   │   Imports:
    │   │   │     - core.feature_engineering.feature_provider.fetch_features
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.time_context.time_context.get_simulation_date
    │   │   │     - db.postgres_manager.run_query
    │   │   │     - gym
    │   │   │     - gym.spaces
    │   │   │     - numpy
    │   │   │     - pandas
    │   │   │   Class: ODINTradingEnv
    │   │   │     Docstring:
    │   │   │       A custom Gym environment for RL agent in O.D.I.N.
    │   │   │       Reads replay events from SQL replay_buffer and
    │   │   │       yields observations and rewards.
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - _load_events
    │   │   │       - _infer_observation_space
    │   │   │       - _parse_event
    │   │   │       - reset
    │   │   │       - step
    │   │   ├── ppo_trainer.py
    │   │   │   Imports:
    │   │   │     - collections.deque
    │   │   │     - core.logger.logger.logger
    │   │   │     - core.rl.gym_env.ODINTradingEnv
    │   │   │     - numpy
    │   │   │     - os
    │   │   │     - torch
    │   │   │     - torch.nn
    │   │   │     - torch.optim.Adam
    │   │   │     - utils.progress_logger.log_model_progress
    │   │   │   Class: ActorCritic
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - forward
    │   │   │   Class: PPOTrainer
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - collect_rollout
    │   │   │       - train_step
    │   │   │       - save_model
    │   │   │       - load_model
    │   │   └── sql_env.py
    │   │       Imports:
    │   │         - core.feature_engineering.feature_provider.fetch_features
    │   │         - core.logger.logger.logger
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - db.postgres_manager.run_query
    │   │         - gym
    │   │         - gym.spaces
    │   │         - numpy
    │   │         - pandas
    │   │       Class: ODINSQLTradingEnv
    │   │         Docstring:
    │   │           Fallback Gym environment for PPO trainer that
    │   │           pulls replay events from SQL instead of Redis
    │   │           (used when Redis is not running).
    │   │         Methods:
    │   │           - __init__
    │   │           - _load_events
    │   │           - _infer_observation_space
    │   │           - _parse_event
    │   │           - reset
    │   │           - step
    │   ├── skiplist
    │   │   └── skiplist.py
    │   │       Imports:
    │   │         - core.config.config.settings
    │   │         - core.logger.logger.logger
    │   │         - datetime.datetime
    │   │         - datetime.timedelta
    │   │         - db.postgres_manager.run_query
    │   │       Function: is_in_skiplist
    │   │       Function: add_to_skiplist
    │   │       Function: remove_from_skiplist
    │   │       Function: get_skiplist
    │   ├── system_state.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.load_model
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - datetime.datetime
    │   │     - json
    │   │     - pandas
    │   │   Function: get_market_data_state
    │   │   Function: get_feature_state
    │   │   Function: get_model_state
    │   │   Function: get_planner_state
    │   │   Function: get_execution_state
    │   │   Function: build_system_state
    │   │   Function: get_system_config
    │   │   Function: update_system_config
    │   ├── time_context
    │   │   └── time_context.py
    │   │       Imports:
    │   │         - datetime.datetime
    │   │         - datetime.time
    │   │         - os
    │   │         - pandas
    │   │         - pandas.tseries.offsets.BDay
    │   │         - pytz
    │   │       Function: get_simulation_date
    │   │         Docstring:
    │   │           Return simulation date as timezone-aware
    │   │           pd.Timestamp (IST)
    │   │       Function: set_simulation_date
    │   │       Function: clear_simulation_date
    │   ├── token_manager.py
    │   │   Imports:
    │   │     - json
    │   │     - os
    │   │     - pathlib.Path
    │   │   Function: save_access_token
    │   │   Function: load_access_token
    │   │   Function: get_saved_access_token
    │   └── validation
    │       ├── __init__.py
    │       └── data_checks.py
    │           Imports:
    │             - numpy
    │             - pandas
    │             - scipy.stats.zscore
    │           Function: check_missing
    │           Function: class_balance
    │           Function: detect_outliers
    ├── create_daily_features.sql
    ├── data
    │   └── feature_store.duckdb
    ├── db
    │   ├── __init__.py
    │   ├── conflict_utils.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - db.db.engine
    │   │     - db.models.Base
    │   │     - pandas
    │   │     - sqlalchemy.dialects.postgresql.insert
    │   │   Function: insert_with_conflict_handling
    │   ├── csv_to_sql.py
    │   │   Imports:
    │   │     - db.db_router.insert_dataframe
    │   │     - pandas
    │   │     - pathlib.Path
    │   │     - sys
    │   │   Function: csv_to_sql
    │   ├── db.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - sqlalchemy.create_engine
    │   │     - sqlalchemy.orm.sessionmaker
    │   │   Function: get_session
    │   │     Docstring:
    │   │       Returns a new SQLAlchemy Session.
    │   ├── init_postgres.py
    │   │   Imports:
    │   │     - db.postgres_manager.execute_raw_sql
    │   │     - db.postgres_manager.run_query
    │   │   Function: table_exists
    │   │   Function: init_postgres
    │   ├── models.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - datetime.date
    │   │     - datetime.datetime
    │   │     - sqlalchemy.BigInteger
    │   │     - sqlalchemy.Boolean
    │   │     - sqlalchemy.Column
    │   │     - sqlalchemy.Date
    │   │     - sqlalchemy.DateTime
    │   │     - sqlalchemy.Float
    │   │     - sqlalchemy.Integer
    │   │     - sqlalchemy.JSON
    │   │     - sqlalchemy.String
    │   │     - sqlalchemy.TIMESTAMP
    │   │     - sqlalchemy.dialects.postgresql.JSONB
    │   │     - sqlalchemy.orm.declarative_base
    │   │     - sqlalchemy.text
    │   │   Class: Instrument
    │   │   Class: SkiplistStock
    │   │   Class: StockPriceHistory
    │   │   Class: JointPolicyPrediction
    │   │   Class: StockFeatureDay
    │   │   Class: StockFeature1m
    │   │   Class: StockFeature15m
    │   │   Class: StockFeature60m
    │   │   Class: StockFundamental
    │   │   Class: StockEncoding
    │   │   Class: Recommendation
    │   │   Class: OpenPosition
    │   │   Class: PaperTrade
    │   │   Class: FilterModelPrediction
    │   │   Class: ParamModelPrediction
    │   │   Class: PriceModelPrediction
    │   │   Class: TrainingData
    │   │   Class: SystemLog
    │   │   Class: MLSelectedStock
    │   │     Methods:
    │   │       - __repr__
    │   ├── postgres_manager.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.logger.logger.logger
    │   │     - db.db.SessionLocal
    │   │     - db.models.Instrument
    │   │     - db.models.SkiplistStock
    │   │     - pandas
    │   │     - sqlalchemy.create_engine
    │   │     - sqlalchemy.text
    │   │     - typing.List
    │   │   Function: read_table
    │   │   Function: run_query
    │   │   Function: execute_raw_sql
    │   │   Function: insert_dataframe
    │   │     Docstring:
    │   │       Bulk-insert a DataFrame into a PostgreSQL table using
    │   │       SQLAlchemy.
    │   │   Function: get_all_symbols
    │   └── replay_buffer_sql.py
    │       Imports:
    │         - datetime.datetime
    │         - db.postgres_manager.run_query
    │         - json
    │         - pandas
    │       Class: SQLReplayBuffer
    │         Methods:
    │           - __init__
    │           - _insert_episode
    │             Docstring:
    │               Internal helper to insert a replay episode.
    │           - add
    │             Docstring:
    │               Historical bootstrap: merge trade_result.meta
    │               + tags into features JSON.
    │           - add_episode
    │             Docstring:
    │               Live bootstrap: record state, next_state,
    │               done + optional tags.
    │           - count_real_trades
    │             Docstring:
    │               Return count of episodes where reward IS NOT
    │               NULL.
    │           - size
    │             Docstring:
    │               Return total number of episodes.
    │           - load_all
    │             Docstring:
    │               Load all episodes, ordered by date and
    │               insertion time.
    │           - clear
    │             Docstring:
    │               Remove all episodes.
    │           - clear_old_episodes
    │             Docstring:
    │               Delete episodes older than `days` days.
    │       Function: insert_replay_episode
    │         Docstring:
    │           Convenience alias for SQLReplayBuffer._insert_episode.
    │       Function: load_replay_episodes
    │         Docstring:
    │           Load replay episodes, optionally filtering by stock
    │           and/or interval.
    │       Function: count_by_stock
    │         Docstring:
    │           Return DataFrame of episode counts grouped by stock.
    │       Function: policy_converged
    │         Docstring:
    │           Determine if policy has converged based on recent
    │           rewards.
    ├── debug_merge_issue.py
    │   Imports:
    │     - core.data_provider.data_provider.load_data
    │     - core.logger.logger.logger
    │     - pandas
    ├── diagnosis
    │   ├── clear_all_sql_tables.py
    │   │   Imports:
    │   │     - core.logger.logger.logger
    │   │     - db.db_router.execute_raw_sql
    │   │   Function: clear_all_tables
    │   ├── diagnose_storage.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.load_data
    │   │     - os
    │   │     - pathlib.Path
    │   │     - sqlite3
    │   │   Function: table_exists
    │   ├── evaluate_model_curves.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - matplotlib.pyplot
    │   │     - numpy
    │   │     - pandas
    │   │     - sklearn.metrics.mean_absolute_error
    │   │     - sklearn.metrics.mean_squared_error
    │   │   Function: load_predictions
    │   │   Function: load_actual_prices
    │   │   Function: evaluate_model
    │   ├── fix_model_path_usage.py
    │   │   Imports:
    │   │     - pathlib.Path
    │   │     - re
    │   │   Function: fix_file
    │   │   Function: main
    │   ├── migrate_paths_to_sql.py
    │   │   Imports:
    │   │     - argparse
    │   │     - os
    │   │     - pathlib.Path
    │   │     - re
    │   │   Function: transform_code
    │   │   Function: update_file
    │   │   Function: run_all
    │   ├── migrate_to_sql.py
    │   │   Imports:
    │   │     - config.paths.PATHS
    │   │     - db.db_router.DB_PATH
    │   │     - db.db_router.insert_dataframe
    │   │     - os
    │   │     - pandas
    │   │     - pickle
    │   │     - sqlite3
    │   │   Function: ensure_blob_json_tables
    │   │     Docstring:
    │   │       Create the blob and JSON store tables if they don't
    │   │       exist.
    │   │   Function: migrate_csv
    │   │   Function: migrate_pkl
    │   │   Function: migrate_json
    │   │   Function: migrate_to_sql
    │   ├── seed_training_data.py
    │   │   Imports:
    │   │     - core.logger.logger.logger
    │   │     - db.db_router.insert_dataframe
    │   │     - pandas
    │   │   Function: seed
    │   ├── simulate_execution.py
    │   │   Imports:
    │   │     - agents.execution.execution_agent_sql.ExecutionAgentSQL
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.clear_simulation_date
    │   │     - core.time_context.time_context.set_simulation_date
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │     - predictive_trader.curve_predictor.generate_curves_for_list
    │   │     - predictive_trader.curve_signal_generator.generate_signals_from_curves
    │   │   Function: generate_trading_days
    │   │   Function: simulate_trading_days
    │   ├── simulate_history.py
    │   │   Imports:
    │   │     - agents.memory.memory_agent.MemoryAgent
    │   │     - agents.planner.intraday_planner_agent.IntradayPlannerAgent
    │   │     - agents.planner.planner_agent_sql.PlannerAgentSQL
    │   │     - argparse
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.set_simulation_date
    │   │     - datetime.datetime
    │   │     - models.meta_strategy_selector.train_meta_model
    │   │     - models.train_dual_model_sql.train_dual_model
    │   │     - models.train_exit_model.train_exit_model
    │   │     - models.train_param_model.train_param_model
    │   │     - models.train_stock_filter_model.train_stock_filter_model
    │   │     - pandas
    │   │     - subprocess
    │   │   Function: daterange
    │   │   Function: simulate_and_bootstrap
    │   ├── simulate_history_single.py
    │   │   Imports:
    │   │     - agents.planner.planner_agent_sql.PlannerAgentSQL
    │   │     - argparse
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.set_simulation_date
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │     - pandas
    │   │   Function: simulate_stock_over_range
    │   └── view_predicted_curves.py
    │       Imports:
    │         - core.data_provider.data_provider.load_data
    │         - core.logger.logger.logger
    │         - matplotlib.pyplot
    │         - numpy
    │         - pandas
    │         - sklearn.metrics.mean_absolute_error
    │         - sklearn.metrics.mean_squared_error
    │       Function: load_predictions
    │       Function: load_actual_prices
    │       Function: evaluate_model
    ├── docker-compose.yml
    ├── fast_bootstrap_data_report.csv
    ├── flows
    │   ├── attribution_flow.py
    │   │   Imports:
    │   │     - core.event_bus.emit_event
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - db.postgres_manager.run_query
    │   │     - pandas
    │   │     - prefect.flow
    │   │   Function: reward_attribution_flow
    │   ├── auto_pipeline.py
    │   │   Imports:
    │   │     - agents.memory.feedback_loop.update_training_data
    │   │     - agents.memory.memory_agent.MemoryAgent
    │   │     - archive.feature_enricher.enrich_features
    │   │     - argparse
    │   │     - core.backtest_bt.run_backtest_config
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - datetime.date
    │   │     - datetime.timedelta
    │   │     - db.db.get_session
    │   │     - models.meta_strategy_selector.train_meta_model
    │   │     - models.run_stock_filter.run_stock_filter
    │   │     - models.train_dual_model_sql.train_dual_model
    │   │     - models.train_stock_filter_model.train_stock_filter_model
    │   │     - prefect.flow
    │   │     - prefect.get_run_logger
    │   │     - prefect.server.schemas.schedules.IntervalSchedule
    │   │     - prefect.task
    │   │     - sqlalchemy.text
    │   │   Function: get_last_date
    │   │   Function: update_last_date
    │   │   Function: ingest_data
    │   │   Function: enrich
    │   │   Function: run_filter
    │   │   Function: backtest_and_label
    │   │   Function: check_drift_and_trigger
    │   │   Function: retrain_models
    │   │   Function: self_learning_pipeline
    │   ├── backfill_1m_features_flow.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │     - core.logger.logger.logger
    │   │     - core.notifications.redis_notifier.push_feature_ready
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │     - db.postgres_manager.get_all_symbols
    │   │     - pandas
    │   │     - prefect.flow
    │   │     - prefect.get_run_logger
    │   │     - prefect.task
    │   │   Function: backfill_for_symbol
    │   │   Function: backfill_1m_feature_flow
    │   ├── backfill_pipeline.py
    │   │   Imports:
    │   │     - argparse
    │   │     - datetime.date
    │   │     - datetime.timedelta
    │   │     - flows.auto_pipeline.self_learning_pipeline
    │   │     - prefect.flow
    │   │   Function: historical_backfill
    │   ├── bootstrap
    │   ├── clean_skiplist_flow.py
    │   │   Imports:
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - db.postgres_manager.run_query
    │   │     - prefect.flow
    │   │   Function: clean_skiplist_flow
    │   ├── fundamental_pipeline.py
    │   │   Imports:
    │   │     - argparse
    │   │     - bs4.BeautifulSoup
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.logger.logger.logger
    │   │     - core.skiplist.skiplist.add_to_skiplist
    │   │     - core.skiplist.skiplist.is_in_skiplist
    │   │     - db.postgres_manager.run_query
    │   │     - numpy
    │   │     - os
    │   │     - pandas
    │   │     - pathlib.Path
    │   │     - prefect.flow
    │   │     - prefect.get_run_logger
    │   │     - prefect.task
    │   │     - requests
    │   │     - time
    │   │     - yfinance
    │   │   Function: load_nse_symbols
    │   │   Function: is_cache_valid
    │   │   Function: save_local_cache
    │   │   Function: clear_sql_table
    │   │   Function: clear_local_cache
    │   │   Function: _scrape_screener
    │   │   Function: _fetch_yfinance
    │   │   Function: fetch_fundamentals
    │   │   Function: parse_fundamentals
    │   │   Function: clear_everything
    │   │   Function: get_todo_symbols
    │   │   Function: fetch_one
    │   │   Function: save_batch
    │   │   Function: fundamental_fetch_flow
    │   │     Docstring:
    │   │       1) Optionally clear out everything if --force 2)
    │   │       Figure out which symbols still need data 3) Fan out
    │   │       one task per symbol (up to your concurrency limit) 4)
    │   │       Persist the successful rows back into SQL 5) On
    │   │       subsequent Prefect runs you’ll only fetch the delta
    │   │       until “get_todo_symbols” returns empty → you’re done.
    │   ├── live
    │   ├── log_feedback_transitions_flow.py
    │   │   Imports:
    │   │     - core.event_bus.subscribe_to_events
    │   │     - core.logger.logger.logger
    │   │     - db.replay_buffer_sql.SQLReplayBuffer
    │   │     - prefect.flow
    │   │   Function: handle_trade_close
    │   │   Function: feedback_logger_flow
    │   ├── monitor_system_flow.py
    │   │   Imports:
    │   │     - core.logger.logger.logger
    │   │     - core.predict.policy_chooser.get_sharpe
    │   │     - core.system_state.get_system_config
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - db.postgres_manager.insert_row
    │   │     - db.postgres_manager.run_query
    │   │     - json
    │   │     - pandas
    │   │     - prefect.flow
    │   │   Function: monitor_system_flow
    │   │   Function: _get_reward_summary
    │   │   Function: _get_training_summary
    │   ├── retrain
    │   ├── schedule_precompute_features.py
    │   │   Imports:
    │   │     - core.logger.logger.logger
    │   │     - prefect.flow
    │   │     - prefect.task
    │   │     - subprocess
    │   │   Function: run_precompute
    │   │   Function: precompute_features_flow
    │   ├── track_replay_summary_flow.py
    │   │   Imports:
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - db.postgres_manager.insert_df
    │   │     - db.postgres_manager.run_query
    │   │     - pandas
    │   │     - prefect.flow
    │   │   Function: track_replay_summary_flow
    │   ├── trading_pipeline.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.load_data
    │   │     - datetime.date
    │   │     - db.postgres_manager.run_query
    │   │     - optuna
    │   │     - pandas
    │   │     - prefect.deployments.Deployment
    │   │     - prefect.flow
    │   │     - prefect.server.schemas.schedules.CronSchedule
    │   │     - prefect.task
    │   │     - vectorbt
    │   │   Class: FeatureBuilder
    │   │     Methods:
    │   │       - __init__
    │   │       - build
    │   │   Class: SignalGenerator
    │   │     Methods:
    │   │       - __init__
    │   │       - generate
    │   │   Function: task_fetch_price
    │   │   Function: task_persist_signals
    │   │   Function: task_execute
    │   │   Function: optimize_strategy
    │   │   Function: daily_trading_flow
    │   │   Function: objective
    │   ├── train_joint_policy_flow.py
    │   │   Imports:
    │   │     - agents.joint_policy_trainer.train_joint_policy_if_ready
    │   │     - core.logger.logger.logger
    │   │     - prefect.flow
    │   │   Function: train_joint_policy_flow
    │   ├── train_rl_policy_flow.py
    │   │   Imports:
    │   │     - agents.rl_ppo_trainer.retrain_ppo_if_ready
    │   │     - core.logger.logger.logger
    │   │     - prefect.flow
    │   │   Function: train_rl_policy_flow
    │   └── update_rl_rewards_flow.py
    │       Imports:
    │         - core.logger.logger.logger
    │         - core.time_context.time_context.get_simulation_date
    │         - db.postgres_manager.run_query
    │         - prefect.flow
    │       Function: update_rl_rewards_flow
    ├── fundamental_data.csv
    ├── generate_project_summary_txt.py
    │   Imports:
    │     - argparse
    │     - ast
    │     - os
    │     - textwrap
    │   Class: SimpleLogger
    │     Methods:
    │       - info
    │   Function: attach_parents
    │   Function: parse_python_file
    │   Function: iter_parents
    │   Function: extract_data_access_summary
    │   Function: build_tree
    │   Function: main
    │   Function: resolve_arg
    ├── generate_stock_labels.py
    │   Imports:
    │     - core.logger.logger.logger
    │     - os
    │     - pandas
    │   Function: generate_labels
    ├── generate_training_data.py
    │   Imports:
    │     - core.logger.logger.logger
    │     - os
    │     - pandas
    │   Function: main
    ├── inspect_feature_dates.py
    │   Imports:
    │     - core.data_provider.data_provider.load_data
    │     - core.logger.logger.logger
    │     - pandas
    ├── inspection
    │   └── check_bootstrap_data.py
    │       Imports:
    │         - datetime.datetime
    │         - datetime.timedelta
    │         - pandas
    │         - sqlalchemy.create_engine
    │         - tqdm.tqdm
    │       Function: fetch_table
    ├── integrations
    │   ├── __init__.py
    │   ├── drift_detection.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - evidently.metric_preset.DataDriftPreset
    │   │     - evidently.report.Report
    │   │   Function: check_drift
    │   ├── zerodha_client.py
    │   │   Imports:
    │   │     - json
    │   │     - kiteconnect.KiteConnect
    │   │     - kiteconnect.KiteTicker
    │   │     - os
    │   │   Function: get_kite
    │   │   Function: get_ticker
    │   └── zerodha_fetcher.py
    │       Imports:
    │         - core.logger.logger.logger
    │         - datetime.datetime
    │         - datetime.timedelta
    │         - dateutil.parser.parse
    │         - db.conflict_utils.insert_with_conflict_handling
    │         - db.postgres_manager.run_query
    │         - integrations.zerodha_client.get_kite
    │         - os
    │         - pandas
    │         - utils.time_utils.to_naive_utc
    │       Function: get_last_trading_day
    │       Function: is_valid_price_df
    │       Function: fetch_historical_data
    │       Function: get_instrument_token
    │       Function: main
    ├── invalid_instruments.csv
    ├── jobs
    │   └── recheck_expired_skips.py
    │       Imports:
    │         - core.logger.logger.logger
    │         - core.skiplist.skiplist.remove_from_skiplist
    │         - datetime.datetime
    │         - db.postgres_manager.run_query
    │       Function: recheck_stock
    │         Docstring:
    │           Placeholder for actual recheck logic. Currently
    │           assumes recheck always succeeds. Replace with fetch or
    │           retry logic.
    │       Function: run_expired_skip_recheck
    ├── logs
    │   ├── failed_fundamentals.csv
    │   ├── history_simulation
    │   │   └── simulate_history_20250503_111707.log
    │   ├── planner_agent_20250608_040331.log
    │   ├── planner_agent_20250609_002808.log
    │   ├── planner_agent_20250609_002913.log
    │   ├── planner_agent_20250609_002957.log
    │   ├── planner_agent_20250609_004218.log
    │   ├── planner_agent_20250609_004827.log
    │   ├── planner_agent_20250611_003430.log
    │   ├── planner_agent_20250611_003641.log
    │   ├── planner_agent_20250611_003649.log
    │   ├── planner_agent_20250611_003748.log
    │   ├── planner_agent_20250611_003756.log
    │   ├── planner_agent_20250611_030839.log
    │   ├── planner_agent_20250611_042454.log
    │   ├── planner_agent_20250611_173547.log
    │   ├── planner_agent_20250611_173728.log
    │   ├── planner_agent_20250613_035748.log
    │   ├── planner_agent_20250613_035819.log
    │   ├── planner_agent_20250613_035822.log
    │   ├── planner_agent_20250613_035912.log
    │   ├── planner_agent_20250613_050844.log
    │   ├── planner_agent_20250613_050901.log
    │   ├── planner_agent_20250613_051432.log
    │   ├── planner_agent_20250613_051441.log
    │   ├── planner_agent_20250613_051818.log
    │   ├── planner_agent_20250613_051826.log
    │   ├── planner_agent_20250613_052254.log
    │   ├── planner_agent_20250613_052302.log
    │   ├── planner_agent_20250613_052404.log
    │   ├── planner_agent_20250613_052412.log
    │   ├── planner_agent_20250613_052415.log
    │   └── rl_ppo
    │       ├── PPO_1
    │       │   └── events.out.tfevents.1747647889.MYPC.39688.0
    │       └── PPO_2
    │           └── events.out.tfevents.1747648726.MYPC.33028.0
    ├── models
    │   ├── __init__.py
    │   ├── envs
    │   │   └── trading_env.py
    │   │       Imports:
    │   │         - core.config.config.settings
    │   │         - core.data_provider.data_provider.fetch_stock_data
    │   │         - gym
    │   │         - gym.spaces
    │   │         - numpy
    │   │         - pandas
    │   │       Class: TradingEnv
    │   │         Methods:
    │   │           - __init__
    │   │           - _get_obs
    │   │           - reset
    │   │           - step
    │   │           - render
    │   ├── filter_model.lgb
    │   ├── joint_policy.py
    │   │   Imports:
    │   │     - joblib
    │   │     - lightgbm
    │   │     - os
    │   │     - pandas
    │   │   Class: JointPolicyModel
    │   │     Methods:
    │   │       - __init__
    │   │       - fit
    │   │       - predict
    │   │       - save
    │   │       - load
    │   ├── meta_strategy_selector.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.load_model
    │   │     - core.model_io.save_model
    │   │     - itertools
    │   │     - pandas
    │   │     - sklearn.ensemble.RandomForestRegressor
    │   │     - sklearn.metrics.mean_squared_error
    │   │     - sklearn.model_selection.train_test_split
    │   │   Function: load_combined_grid_data
    │   │     Docstring:
    │   │       Load and combine grid search results from all
    │   │       configured CSV paths.
    │   │   Function: train_meta_model
    │   │     Docstring:
    │   │       Train a meta-model to predict strategy performance.
    │   │       Reads combined grid data, applies settings-driven
    │   │       train/test split, trains an RF regressor with
    │   │       settings-backed hyperparams, logs & saves the model
    │   │       and its metadata.
    │   │   Function: suggest_best_parameters
    │   │     Docstring:
    │   │       Given a trained meta-model, enumerate the cartesian
    │   │       product of settings-backed parameter ranges, predict
    │   │       their score, and return the top-N configs as a
    │   │       DataFrame.
    │   ├── ml_dual_model_prediction_sql.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.load_model
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - pandas
    │   │   Function: predict_dual_model
    │   │     Docstring:
    │   │       Dual‐model prediction pipeline: - Loads fundamentals
    │   │       from `data_path` - Loads feature table from
    │   │       `feature_path` - Runs filter and exit models, returns
    │   │       top_n signals
    │   ├── ml_training_sql.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.save_model
    │   │     - pandas
    │   │     - sklearn.ensemble.RandomForestRegressor
    │   │     - sklearn.metrics.mean_squared_error
    │   │     - sklearn.model_selection.train_test_split
    │   │     - sklearn.preprocessing.LabelEncoder
    │   │   Function: merge_intervals
    │   │   Function: train_meta_model
    │   │     Docstring:
    │   │       Train a meta-model (regressor) on combined multi-
    │   │       interval features. Uses settings for split and
    │   │       hyperparams.
    │   ├── predictive_trader
    │   │   ├── RELIANCE_v2_lstm.keras
    │   │   └── RELIANCE_v2_scaler.pkl
    │   ├── rl_policy_20250519_160708.zip
    │   ├── run_stock_filter.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.logger.logger.logger
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │     - db.postgres_manager.run_query
    │   │     - joblib
    │   │     - lightgbm
    │   │     - os
    │   │     - pandas
    │   │   Function: run_stock_filter
    │   ├── train_dual_model_sql.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.save_model
    │   │     - optuna
    │   │     - pandas
    │   │     - sklearn.ensemble.RandomForestClassifier
    │   │     - sklearn.ensemble.RandomForestRegressor
    │   │     - sklearn.metrics.accuracy_score
    │   │     - sklearn.metrics.mean_squared_error
    │   │     - sklearn.model_selection.train_test_split
    │   │   Function: _load_training
    │   │   Function: train_dual_model
    │   │   Function: objective_class
    │   │   Function: objective_reg
    │   ├── train_entry_exit_model.py
    │   │   Imports:
    │   │     - core.config.config.get_feature_columns
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.save_model
    │   │     - pandas
    │   │     - sklearn.ensemble.RandomForestRegressor
    │   │     - sklearn.metrics.mean_squared_error
    │   │     - sklearn.model_selection.train_test_split
    │   │   Function: train_meta_model
    │   ├── train_exit_model.py
    │   │   Imports:
    │   │     - collections.Counter
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.save_model
    │   │     - pandas
    │   │     - sklearn.ensemble.RandomForestClassifier
    │   │     - sklearn.metrics.accuracy_score
    │   │     - sklearn.metrics.classification_report
    │   │     - sklearn.model_selection.train_test_split
    │   │   Function: train_exit_model
    │   ├── train_meta_model.py
    │   │   Imports:
    │   │     - core.config.config.get_feature_columns
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.save_model
    │   │     - pandas
    │   │     - sklearn.ensemble.RandomForestRegressor
    │   │     - sklearn.metrics.mean_squared_error
    │   │     - sklearn.model_selection.train_test_split
    │   │   Function: train_meta_model
    │   ├── train_stock_filter_model.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.logger.logger.logger
    │   │     - datetime.datetime
    │   │     - joblib
    │   │     - lightgbm
    │   │     - pandas
    │   │     - pathlib.Path
    │   │     - sklearn.metrics.classification_report
    │   │     - sklearn.metrics.roc_auc_score
    │   │     - sklearn.model_selection.train_test_split
    │   │   Function: save_model_and_predictions
    │   │   Function: train_filter_model
    │   └── train_strategy_selector.py
    │       Imports:
    │         - core.logger.logger.logger
    │         - pandas
    │         - pickle
    │         - sklearn.ensemble.RandomForestRegressor
    │         - sklearn.model_selection.train_test_split
    │         - sklearn.multioutput.MultiOutputRegressor
    │       Function: train_strategy_selector
    ├── odin_banner.txt
    ├── paper_trader.py
    │   Imports:
    │     - core.logger.logger.logger
    │     - datetime.datetime
    │     - os
    │     - pandas
    │     - yfinance
    │   Function: load_recommendations
    │   Function: load_open_positions
    │   Function: load_today_price
    │   Function: enter_trades
    │   Function: check_exit_condition
    │   Function: exit_trades
    │   Function: log_trades
    │   Function: main
    ├── ppo_buffers
    ├── project_data
    │   ├── archive
    │   ├── logs
    │   ├── meta
    │   ├── models
    │   ├── predictions
    │   ├── processed
    │   ├── raw
    │   ├── results
    │   │   ├── history
    │   │   ├── ml_selected_stocks.csv
    │   │   ├── open_positions.csv
    │   │   ├── stock_fundamentals.csv
    │   │   └── weekly_recommendations.csv
    │   ├── secrets
    │   └── trading_system.db
    ├── project_status.md
    ├── project_summary.txt
    ├── reports
    │   ├── analyze_selected_stocks.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - pandas
    │   │     - sqlalchemy.create_engine
    │   ├── check_replay_stats.py
    │   │   Imports:
    │   │     - pandas
    │   │     - sqlalchemy.create_engine
    │   ├── daily_snapshot.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - datetime.datetime
    │   │     - datetime.timedelta
    │   │     - pandas
    │   │   Function: compute_snapshot
    │   └── dashboards
    │       ├── system_dashboard.py
    │       │   Imports:
    │       │     - datetime.datetime
    │       │     - db.postgres_manager.run_query
    │       │     - logging
    │       │     - pandas
    │       │     - streamlit
    │       │   Function: load_agent_status
    │       │   Function: load_today_trades
    │       │   Function: load_training_data_count
    │       │   Function: load_retrained_models
    │       │   Function: load_feedback_status
    │       └── system_dashboard_backup.py
    │           Imports:
    │             - datetime.datetime
    │             - datetime.timedelta
    │             - db.postgres_manager.run_query
    │             - pandas
    │             - reports.weekly_snapshot.compute_snapshot
    │             - streamlit
    │           Function: load_system_log
    │           Function: load_trade_summary
    ├── requirements-dev.txt
    ├── requirements.txt
    ├── results
    ├── rl
    │   ├── buffers
    │   │   └── ppo_buffers
    │   ├── envs
    │   │   ├── offline_env.py
    │   │   │   Imports:
    │   │   │     - gymnasium.Env
    │   │   │     - gymnasium.spaces.Box
    │   │   │     - gymnasium.spaces.Discrete
    │   │   │     - hashlib
    │   │   │     - logging
    │   │   │     - numpy
    │   │   │     - pandas
    │   │   │   Class: OfflineEnv
    │   │   │     Docstring:
    │   │   │       An offline environment that replays stored
    │   │   │       transitions from a replay buffer. Each row
    │   │   │       contains: state, action, reward, next_state, and
    │   │   │       done. Adds inferred next_state, done flag,
    │   │   │       episode_id, step_count, and metadata. Applies
    │   │   │       reward shaping based on metadata and logs shaped
    │   │   │       vs raw rewards.
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - _prepare_episodes
    │   │   │       - reset
    │   │   │       - _calculate_shaped_reward
    │   │   │       - step
    │   │   └── trading_env.py
    │   │       Imports:
    │   │         - core.data_provider.data_provider.fetch_stock_data
    │   │         - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │   │         - core.logger.logger.logger
    │   │         - core.model_io.load_latest_model
    │   │         - core.model_io.load_model
    │   │         - core.model_io.save_model
    │   │         - core.predict.rl_predictor.TradingEnv
    │   │         - core.predict.rl_predictor.load_policy
    │   │         - core.predict.rl_predictor.load_rl_frame
    │   │         - core.time_context.time_context.get_simulation_date
    │   │         - datetime.datetime
    │   │         - gymnasium
    │   │         - gymnasium.spaces
    │   │         - numpy
    │   │         - stable_baselines3.PPO
    │   │         - stable_baselines3.common.vec_env.DummyVecEnv
    │   │       Class: TradingEnv
    │   │         Docstring:
    │   │           A trading environment supporting long and short
    │   │           positions with reward shaping, drawdown penalties,
    │   │           max holding logic, and episodic control.
    │   │         Methods:
    │   │           - __init__
    │   │           - _get_obs
    │   │           - reset
    │   │           - _calculate_reward
    │   │           - step
    │   │       Function: save_rl_model
    │   │       Function: predict_with_fallback
    │   ├── policies
    │   ├── rl_finetune.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.load_latest_model
    │   │     - core.model_io.load_model
    │   │     - core.model_io.save_model
    │   │     - datetime.datetime
    │   │     - db.replay_buffer_sql.load_replay_episodes
    │   │     - numpy
    │   │     - os
    │   │     - rl.envs.trading_env.TradingEnv
    │   │     - stable_baselines3.PPO
    │   │     - stable_baselines3.common.vec_env.DummyVecEnv
    │   │   Class: OfflineEnv
    │   │     Methods:
    │   │       - __init__
    │   │       - reset
    │   │       - step
    │   │   Function: finetune_rl
    │   ├── train_rl_agent.py
    │   │   Imports:
    │   │     - argparse
    │   │     - core.config.config.settings
    │   │     - core.logger.logger.logger
    │   │     - core.model_io.save_model
    │   │     - core.predict.rl_predictor.load_rl_frame
    │   │     - datetime.datetime
    │   │     - os
    │   │     - pandas
    │   │     - rl.envs.trading_env.TradingEnv
    │   │     - stable_baselines3.PPO
    │   │     - stable_baselines3.common.vec_env.DummyVecEnv
    │   │   Function: get_symbols
    │   │   Function: make_env
    │   │   Function: main
    │   │   Function: _env
    │   ├── train_rl_intraday.py
    │   │   Imports:
    │   │     - rl.train_rl_agent.main
    │   │     - sys
    │   └── utils.py
    ├── run_feature_backfill_test.py
    │   Imports:
    │     - core.feature_engineering.feature_provider.fetch_features_with_backfill
    │     - core.logger.logger.logger
    │     - datetime.datetime
    ├── scripts
    │   ├── __archive__
    │   │   ├── db_manager.py
    │   │   │   Imports:
    │   │   │     - config.paths.PATHS
    │   │   │     - core.logger.logger.logger
    │   │   │     - pandas
    │   │   │     - sqlite3
    │   │   │     - time
    │   │   │   Function: get_connection
    │   │   │     Docstring:
    │   │   │       Block until connection is possible and WAL is
    │   │   │       enabled.
    │   │   │   Function: insert_dataframe
    │   │   │   Function: read_table
    │   │   │   Function: run_query
    │   │   │   Function: list_tables
    │   │   │   Function: execute_raw_sql
    │   │   │   Function: enable_wal_mode
    │   │   ├── execution_agent.py
    │   │   │   Imports:
    │   │   │     - config.paths.PATHS
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.data_provider.data_provider.save_data
    │   │   │     - core.logger.logger.logger
    │   │   │     - datetime.datetime
    │   │   │     - os
    │   │   │     - pandas
    │   │   │     - time
    │   │   │     - utils.file_io.load_dataframe
    │   │   │     - utils.file_io.save_dataframe
    │   │   │     - yfinance
    │   │   │   Class: ExecutionAgent
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - load_recommendations
    │   │   │       - load_open_positions
    │   │   │       - load_today_price
    │   │   │       - check_exit_condition
    │   │   │       - log_trades
    │   │   │       - enter_trades
    │   │   │       - exit_trades
    │   │   │       - run
    │   │   ├── historical_data
    │   │   │   ├── 20MICRONS.csv
    │   │   │   ├── 21STCENMGM.csv
    │   │   │   ├── 3IINFOLTD.csv
    │   │   │   ├── 3MINDIA.csv
    │   │   │   ├── 3PLAND.csv
    │   │   │   ├── 5PAISA.csv
    │   │   │   ├── 63MOONS.csv
    │   │   │   ├── A2ZINFRA.csv
    │   │   │   ├── AAATECH.csv
    │   │   │   ├── AAKASH.csv
    │   │   │   ├── AAREYDRUGS.csv
    │   │   │   ├── AARTECH.csv
    │   │   │   ├── AARTIDRUGS.csv
    │   │   │   ├── AARTIIND.csv
    │   │   │   ├── AARTIPHARM.csv
    │   │   │   ├── AARTISURF.csv
    │   │   │   ├── AARVI.csv
    │   │   │   ├── ABAN.csv
    │   │   │   ├── ABB.csv
    │   │   │   ├── ABBOTINDIA.csv
    │   │   │   ├── ABDL.csv
    │   │   │   ├── ABINFRA.csv
    │   │   │   ├── ABMINTLLTD.csv
    │   │   │   ├── ABREL.csv
    │   │   │   ├── ABSLAMC.csv
    │   │   │   ├── ACC.csv
    │   │   │   ├── ACCELYA.csv
    │   │   │   ├── ACE.csv
    │   │   │   ├── ACEINTEG.csv
    │   │   │   ├── ACI.csv
    │   │   │   ├── ACLGATI.csv
    │   │   │   ├── ADANIENSOL.csv
    │   │   │   ├── ADANIENT.csv
    │   │   │   ├── ADANIGREEN.csv
    │   │   │   ├── ADANIPOWER.csv
    │   │   │   ├── ADFFOODS.csv
    │   │   │   ├── ADL.csv
    │   │   │   ├── ADROITINFO.csv
    │   │   │   ├── ADSL.csv
    │   │   │   ├── ADVANIHOTR.csv
    │   │   │   ├── ADVENZYMES.csv
    │   │   │   ├── AEROFLEX.csv
    │   │   │   ├── AETHER.csv
    │   │   │   ├── AFFLE.csv
    │   │   │   ├── AFFORDABLE.csv
    │   │   │   ├── AFIL.csv
    │   │   │   ├── AGARIND.csv
    │   │   │   ├── AGARWALEYE.csv
    │   │   │   ├── AGI.csv
    │   │   │   ├── AGIIL.csv
    │   │   │   ├── AGRITECH.csv
    │   │   │   ├── AGROPHOS.csv
    │   │   │   ├── AHLADA.csv
    │   │   │   ├── AHLUCONT.csv
    │   │   │   ├── AIAENG.csv
    │   │   │   ├── AIIL.csv
    │   │   │   ├── AIRAN.csv
    │   │   │   ├── AJANTPHARM.csv
    │   │   │   ├── AJAXENGG.csv
    │   │   │   ├── AJOONI.csv
    │   │   │   ├── AKG.csv
    │   │   │   ├── AKI.csv
    │   │   │   ├── AKSHAR.csv
    │   │   │   ├── AKUMS.csv
    │   │   │   ├── AKZOINDIA.csv
    │   │   │   ├── ALANKIT.csv
    │   │   │   ├── ALBERTDAVD.csv
    │   │   │   ├── ALEMBICLTD.csv
    │   │   │   ├── ALICON.csv
    │   │   │   ├── ALIVUS.csv
    │   │   │   ├── ALKALI.csv
    │   │   │   ├── ALKEM.csv
    │   │   │   ├── ALKYLAMINE.csv
    │   │   │   ├── ALLCARGO.csv
    │   │   │   ├── ALLDIGI.csv
    │   │   │   ├── ALMONDZ.csv
    │   │   │   ├── ALOKINDS.csv
    │   │   │   ├── ALPA.csv
    │   │   │   ├── ALPHAGEO.csv
    │   │   │   ├── ALPSINDUS.csv
    │   │   │   ├── AMBER.csv
    │   │   │   ├── AMBIKCO.csv
    │   │   │   ├── AMBUJACEM.csv
    │   │   │   ├── AMDIND.csv
    │   │   │   ├── AMIORG.csv
    │   │   │   ├── AMNPLST.csv
    │   │   │   ├── AMRUTANJAN.csv
    │   │   │   ├── ANANDRATHI.csv
    │   │   │   ├── ANANTRAJ.csv
    │   │   │   ├── ANDHRAPAP.csv
    │   │   │   ├── ANDHRSUGAR.csv
    │   │   │   ├── ANGELONE.csv
    │   │   │   ├── ANIKINDS.csv
    │   │   │   ├── ANTGRAPHIC.csv
    │   │   │   ├── ANUHPHR.csv
    │   │   │   ├── ANUP.csv
    │   │   │   ├── ANURAS.csv
    │   │   │   ├── APARINDS.csv
    │   │   │   ├── APCOTEXIND.csv
    │   │   │   ├── APEX.csv
    │   │   │   ├── APLAPOLLO.csv
    │   │   │   ├── APLLTD.csv
    │   │   │   ├── APOLLO.csv
    │   │   │   ├── APOLLOHOSP.csv
    │   │   │   ├── APOLLOPIPE.csv
    │   │   │   ├── APOLLOTYRE.csv
    │   │   │   ├── APOLSINHOT.csv
    │   │   │   ├── APTECHT.csv
    │   │   │   ├── ARCHIES.csv
    │   │   │   ├── ARE&M.csv
    │   │   │   ├── ARENTERP.csv
    │   │   │   ├── ARIES.csv
    │   │   │   ├── ARIHANTCAP.csv
    │   │   │   ├── ARKADE.csv
    │   │   │   ├── ARROWGREEN.csv
    │   │   │   ├── ARSSINFRA.csv
    │   │   │   ├── ARTEMISMED.csv
    │   │   │   ├── ARTNIRMAN.csv
    │   │   │   ├── ARVEE.csv
    │   │   │   ├── ARVIND.csv
    │   │   │   ├── ARVINDFASN.csv
    │   │   │   ├── ASALCBR.csv
    │   │   │   ├── ASHIANA.csv
    │   │   │   ├── ASHIMASYN.csv
    │   │   │   ├── ASIANENE.csv
    │   │   │   ├── ASIANHOTNR.csv
    │   │   │   ├── ASIANPAINT.csv
    │   │   │   ├── ASIANTILES.csv
    │   │   │   ├── ASKAUTOLTD.csv
    │   │   │   ├── ASMS.csv
    │   │   │   ├── ASPINWALL.csv
    │   │   │   ├── ASTERDM.csv
    │   │   │   ├── ASTRAL.csv
    │   │   │   ├── ASTRAMICRO.csv
    │   │   │   ├── ASTRAZEN.csv
    │   │   │   ├── ASTRON.csv
    │   │   │   ├── ATALREAL.csv
    │   │   │   ├── ATAM.csv
    │   │   │   ├── ATGL.csv
    │   │   │   ├── ATLASCYCLE.csv
    │   │   │   ├── ATUL.csv
    │   │   │   ├── ATULAUTO.csv
    │   │   │   ├── AUBANK.csv
    │   │   │   ├── AURIONPRO.csv
    │   │   │   ├── AUROPHARMA.csv
    │   │   │   ├── AURUM.csv
    │   │   │   ├── AUSOMENT.csv
    │   │   │   ├── AUTOAXLES.csv
    │   │   │   ├── AVADHSUGAR.csv
    │   │   │   ├── AVALON.csv
    │   │   │   ├── AVANTEL.csv
    │   │   │   ├── AVANTIFEED.csv
    │   │   │   ├── AVL.csv
    │   │   │   ├── AVONMORE.csv
    │   │   │   ├── AVTNPL.csv
    │   │   │   ├── AWHCL.csv
    │   │   │   ├── AWL.csv
    │   │   │   ├── AXISBANK.csv
    │   │   │   ├── AXISCADES.csv
    │   │   │   ├── AXITA.csv
    │   │   │   ├── AZAD.csv
    │   │   │   ├── BAFNAPH.csv
    │   │   │   ├── BAGFILMS.csv
    │   │   │   ├── BAJAJ-AUTO.csv
    │   │   │   ├── BAJAJCON.csv
    │   │   │   ├── BAJAJELEC.csv
    │   │   │   ├── BAJAJHCARE.csv
    │   │   │   ├── BAJAJHFL.csv
    │   │   │   ├── BAJAJHLDNG.csv
    │   │   │   ├── BAJAJINDEF.csv
    │   │   │   ├── BAJEL.csv
    │   │   │   ├── BALAJEE.csv
    │   │   │   ├── BALAJITELE.csv
    │   │   │   ├── BALAMINES.csv
    │   │   │   ├── BALAXI.csv
    │   │   │   ├── BALKRISHNA.csv
    │   │   │   ├── BALKRISIND.csv
    │   │   │   ├── BALMLAWRIE.csv
    │   │   │   ├── BALRAMCHIN.csv
    │   │   │   ├── BALUFORGE.csv
    │   │   │   ├── BANARBEADS.csv
    │   │   │   ├── BANARISUG.csv
    │   │   │   ├── BANCOINDIA.csv
    │   │   │   ├── BANDHANBNK.csv
    │   │   │   ├── BANG.csv
    │   │   │   ├── BANKBARODA.csv
    │   │   │   ├── BANKINDIA.csv
    │   │   │   ├── BANSALWIRE.csv
    │   │   │   ├── BASF.csv
    │   │   │   ├── BAYERCROP.csv
    │   │   │   ├── BBL.csv
    │   │   │   ├── BBTC.csv
    │   │   │   ├── BCLIND.csv
    │   │   │   ├── BCONCEPTS.csv
    │   │   │   ├── BDL.csv
    │   │   │   ├── BEARDSELL.csv
    │   │   │   ├── BECTORFOOD.csv
    │   │   │   ├── BEL.csv
    │   │   │   ├── BEML.csv
    │   │   │   ├── BEPL.csv
    │   │   │   ├── BERGEPAINT.csv
    │   │   │   ├── BFINVEST.csv
    │   │   │   ├── BGRENERGY.csv
    │   │   │   ├── BHAGCHEM.csv
    │   │   │   ├── BHAGERIA.csv
    │   │   │   ├── BHANDARI.csv
    │   │   │   ├── BHARATFORG.csv
    │   │   │   ├── BHARATRAS.csv
    │   │   │   ├── BHARATWIRE.csv
    │   │   │   ├── BHARTIARTL.csv
    │   │   │   ├── BHARTIHEXA.csv
    │   │   │   ├── BHEL.csv
    │   │   │   ├── BIGBLOC.csv
    │   │   │   ├── BIKAJI.csv
    │   │   │   ├── BIL.csv
    │   │   │   ├── BINANIIND.csv
    │   │   │   ├── BIOCON.csv
    │   │   │   ├── BIOFILCHEM.csv
    │   │   │   ├── BIRLACABLE.csv
    │   │   │   ├── BIRLACORPN.csv
    │   │   │   ├── BLACKBUCK.csv
    │   │   │   ├── BLBLIMITED.csv
    │   │   │   ├── BLISSGVS.csv
    │   │   │   ├── BLKASHYAP.csv
    │   │   │   ├── BLS.csv
    │   │   │   ├── BLSE.csv
    │   │   │   ├── BLUECHIP.csv
    │   │   │   ├── BLUECOAST.csv
    │   │   │   ├── BLUEDART.csv
    │   │   │   ├── BLUEJET.csv
    │   │   │   ├── BLUESTARCO.csv
    │   │   │   ├── BOHRAIND.csv
    │   │   │   ├── BOMDYEING.csv
    │   │   │   ├── BOROLTD.csv
    │   │   │   ├── BORORENEW.csv
    │   │   │   ├── BOROSCI.csv
    │   │   │   ├── BOSCHLTD.csv
    │   │   │   ├── BPL.csv
    │   │   │   ├── BRITANNIA.csv
    │   │   │   ├── BROOKS.csv
    │   │   │   ├── BSE.csv
    │   │   │   ├── BSHSL.csv
    │   │   │   ├── BSOFT.csv
    │   │   │   ├── BUTTERFLY.csv
    │   │   │   ├── BVCL.csv
    │   │   │   ├── BYKE.csv
    │   │   │   ├── CALSOFT.csv
    │   │   │   ├── CAMPUS.csv
    │   │   │   ├── CAMS.csv
    │   │   │   ├── CANBK.csv
    │   │   │   ├── CAPACITE.csv
    │   │   │   ├── CAPITALSFB.csv
    │   │   │   ├── CAPLIPOINT.csv
    │   │   │   ├── CAPTRUST.csv
    │   │   │   ├── CARBORUNIV.csv
    │   │   │   ├── CARERATING.csv
    │   │   │   ├── CARRARO.csv
    │   │   │   ├── CARTRADE.csv
    │   │   │   ├── CARYSIL.csv
    │   │   │   ├── CASTROLIND.csv
    │   │   │   ├── CCHHL.csv
    │   │   │   ├── CDSL.csv
    │   │   │   ├── CEATLTD.csv
    │   │   │   ├── CEIGALL.csv
    │   │   │   ├── CELLO.csv
    │   │   │   ├── CENTENKA.csv
    │   │   │   ├── CENTEXT.csv
    │   │   │   ├── CENTRALBK.csv
    │   │   │   ├── CENTURYPLY.csv
    │   │   │   ├── CERA.csv
    │   │   │   ├── CEREBRAINT.csv
    │   │   │   ├── CEWATER.csv
    │   │   │   ├── CGPOWER.csv
    │   │   │   ├── CHALET.csv
    │   │   │   ├── CHAMBLFERT.csv
    │   │   │   ├── CHEMBOND.csv
    │   │   │   ├── CHEMCON.csv
    │   │   │   ├── CHEMFAB.csv
    │   │   │   ├── CHEVIOT.csv
    │   │   │   ├── CHOICEIN.csv
    │   │   │   ├── CIEINDIA.csv
    │   │   │   ├── CIGNITITEC.csv
    │   │   │   ├── CINEVISTA.csv
    │   │   │   ├── CIPLA.csv
    │   │   │   ├── CLEAN.csv
    │   │   │   ├── CLEDUCATE.csv
    │   │   │   ├── CLSEL.csv
    │   │   │   ├── CMSINFO.csv
    │   │   │   ├── COALINDIA.csv
    │   │   │   ├── COASTCORP.csv
    │   │   │   ├── COCHINSHIP.csv
    │   │   │   ├── COFFEEDAY.csv
    │   │   │   ├── COFORGE.csv
    │   │   │   ├── COLPAL.csv
    │   │   │   ├── COMPUSOFT.csv
    │   │   │   ├── CONCOR.csv
    │   │   │   ├── CONCORDBIO.csv
    │   │   │   ├── CONFIPET.csv
    │   │   │   ├── CONSOFINVT.csv
    │   │   │   ├── CONTROLPR.csv
    │   │   │   ├── CORALFINAC.csv
    │   │   │   ├── CORDSCABLE.csv
    │   │   │   ├── COROMANDEL.csv
    │   │   │   ├── COUNCODOS.csv
    │   │   │   ├── CRAFTSMAN.csv
    │   │   │   ├── CREATIVE.csv
    │   │   │   ├── CREATIVEYE.csv
    │   │   │   ├── CREST.csv
    │   │   │   ├── CRISIL.csv
    │   │   │   ├── CROMPTON.csv
    │   │   │   ├── CSBBANK.csv
    │   │   │   ├── CUB.csv
    │   │   │   ├── CUBEXTUB.csv
    │   │   │   ├── CUMMINSIND.csv
    │   │   │   ├── CUPID.csv
    │   │   │   ├── CYBERTECH.csv
    │   │   │   ├── CYIENT.csv
    │   │   │   ├── CYIENTDLM.csv
    │   │   │   ├── DABUR.csv
    │   │   │   ├── DALBHARAT.csv
    │   │   │   ├── DALMIASUG.csv
    │   │   │   ├── DAMCAPITAL.csv
    │   │   │   ├── DATAMATICS.csv
    │   │   │   ├── DATAPATTNS.csv
    │   │   │   ├── DBCORP.csv
    │   │   │   ├── DBOL.csv
    │   │   │   ├── DBREALTY.csv
    │   │   │   ├── DBSTOCKBRO.csv
    │   │   │   ├── DCAL.csv
    │   │   │   ├── DCBBANK.csv
    │   │   │   ├── DCM.csv
    │   │   │   ├── DCMFINSERV.csv
    │   │   │   ├── DCMNVL.csv
    │   │   │   ├── DCMSHRIRAM.csv
    │   │   │   ├── DCMSRIND.csv
    │   │   │   ├── DCW.csv
    │   │   │   ├── DCXINDIA.csv
    │   │   │   ├── DDEVPLSTIK.csv
    │   │   │   ├── DECCANCE.csv
    │   │   │   ├── DEEDEV.csv
    │   │   │   ├── DEEPAKNTR.csv
    │   │   │   ├── DEEPINDS.csv
    │   │   │   ├── DELHIVERY.csv
    │   │   │   ├── DELPHIFX.csv
    │   │   │   ├── DELTACORP.csv
    │   │   │   ├── DEN.csv
    │   │   │   ├── DENORA.csv
    │   │   │   ├── DENTA.csv
    │   │   │   ├── DEVIT.csv
    │   │   │   ├── DEVYANI.csv
    │   │   │   ├── DHAMPURSUG.csv
    │   │   │   ├── DHANI.csv
    │   │   │   ├── DHANUKA.csv
    │   │   │   ├── DHARMAJ.csv
    │   │   │   ├── DHRUV.csv
    │   │   │   ├── DHUNINV.csv
    │   │   │   ├── DIACABS.csv
    │   │   │   ├── DIAMINESQ.csv
    │   │   │   ├── DIAMONDYD.csv
    │   │   │   ├── DICIND.csv
    │   │   │   ├── DIFFNKG.csv
    │   │   │   ├── DIGISPICE.csv
    │   │   │   ├── DIGJAMLMTD.csv
    │   │   │   ├── DIL.csv
    │   │   │   ├── DISHTV.csv
    │   │   │   ├── DIVGIITTS.csv
    │   │   │   ├── DIVISLAB.csv
    │   │   │   ├── DIXON.csv
    │   │   │   ├── DJML.csv
    │   │   │   ├── DLF.csv
    │   │   │   ├── DLINKINDIA.csv
    │   │   │   ├── DMART.csv
    │   │   │   ├── DNAMEDIA.csv
    │   │   │   ├── DODLA.csv
    │   │   │   ├── DOLATALGO.csv
    │   │   │   ├── DOLLAR.csv
    │   │   │   ├── DOMS.csv
    │   │   │   ├── DPABHUSHAN.csv
    │   │   │   ├── DPSCLTD.csv
    │   │   │   ├── DPWIRES.csv
    │   │   │   ├── DRCSYSTEMS.csv
    │   │   │   ├── DREAMFOLKS.csv
    │   │   │   ├── DREDGECORP.csv
    │   │   │   ├── DRREDDY.csv
    │   │   │   ├── DSSL.csv
    │   │   │   ├── DTIL.csv
    │   │   │   ├── DUCON.csv
    │   │   │   ├── DWARKESH.csv
    │   │   │   ├── DYCL.csv
    │   │   │   ├── DYNPRO.csv
    │   │   │   ├── E2E.csv
    │   │   │   ├── EASEMYTRIP.csv
    │   │   │   ├── ECLERX.csv
    │   │   │   ├── ECOSMOBLTY.csv
    │   │   │   ├── EICHERMOT.csv
    │   │   │   ├── EIDPARRY.csv
    │   │   │   ├── EIFFL.csv
    │   │   │   ├── EIHAHOTELS.csv
    │   │   │   ├── EIHOTEL.csv
    │   │   │   ├── EIMCOELECO.csv
    │   │   │   ├── EKC.csv
    │   │   │   ├── ELDEHSG.csv
    │   │   │   ├── ELECON.csv
    │   │   │   ├── ELECTCAST.csv
    │   │   │   ├── ELECTHERM.csv
    │   │   │   ├── ELGIEQUIP.csv
    │   │   │   ├── ELIN.csv
    │   │   │   ├── EMAMILTD.csv
    │   │   │   ├── EMAMIREAL.csv
    │   │   │   ├── EMBDL.csv
    │   │   │   ├── EMCURE.csv
    │   │   │   ├── EMKAY.csv
    │   │   │   ├── EMSLIMITED.csv
    │   │   │   ├── EMUDHRA.csv
    │   │   │   ├── ENDURANCE.csv
    │   │   │   ├── ENGINERSIN.csv
    │   │   │   ├── ENIL.csv
    │   │   │   ├── ENTERO.csv
    │   │   │   ├── EPACK.csv
    │   │   │   ├── EPIGRAL.csv
    │   │   │   ├── EPL.csv
    │   │   │   ├── EQUITASBNK.csv
    │   │   │   ├── ERIS.csv
    │   │   │   ├── ESABINDIA.csv
    │   │   │   ├── ESAFSFB.csv
    │   │   │   ├── ESCORTS.csv
    │   │   │   ├── ESSARSHPNG.csv
    │   │   │   ├── ESSENTIA.csv
    │   │   │   ├── ETHOSLTD.csv
    │   │   │   ├── EUREKAFORB.csv
    │   │   │   ├── EUROTEXIND.csv
    │   │   │   ├── EVEREADY.csv
    │   │   │   ├── EVERESTIND.csv
    │   │   │   ├── EXCEL.csv
    │   │   │   ├── EXCELINDUS.csv
    │   │   │   ├── EXIDEIND.csv
    │   │   │   ├── EXPLEOSOL.csv
    │   │   │   ├── EXXARO.csv
    │   │   │   ├── FAIRCHEMOR.csv
    │   │   │   ├── FAZE3Q.csv
    │   │   │   ├── FCL.csv
    │   │   │   ├── FCSSOFT.csv
    │   │   │   ├── FDC.csv
    │   │   │   ├── FEDERALBNK.csv
    │   │   │   ├── FEL.csv
    │   │   │   ├── FELDVR.csv
    │   │   │   ├── FIBERWEB.csv
    │   │   │   ├── FIEMIND.csv
    │   │   │   ├── FILATEX.csv
    │   │   │   ├── FILATFASH.csv
    │   │   │   ├── FINCABLES.csv
    │   │   │   ├── FINEORG.csv
    │   │   │   ├── FINOPB.csv
    │   │   │   ├── FINPIPE.csv
    │   │   │   ├── FIRSTCRY.csv
    │   │   │   ├── FLAIR.csv
    │   │   │   ├── FLFL.csv
    │   │   │   ├── FLUOROCHEM.csv
    │   │   │   ├── FMGOETZE.csv
    │   │   │   ├── FOCUS.csv
    │   │   │   ├── FORCEMOT.csv
    │   │   │   ├── FORTIS.csv
    │   │   │   ├── FOSECOIND.csv
    │   │   │   ├── FSC.csv
    │   │   │   ├── FSL.csv
    │   │   │   ├── GABRIEL.csv
    │   │   │   ├── GAEL.csv
    │   │   │   ├── GAIL.csv
    │   │   │   ├── GALAPREC.csv
    │   │   │   ├── GALAXYSURF.csv
    │   │   │   ├── GALLANTT.csv
    │   │   │   ├── GANDHAR.csv
    │   │   │   ├── GANDHITUBE.csv
    │   │   │   ├── GANECOS.csv
    │   │   │   ├── GANESHBE.csv
    │   │   │   ├── GANESHHOUC.csv
    │   │   │   ├── GANGAFORGE.csv
    │   │   │   ├── GANGESSECU.csv
    │   │   │   ├── GARFIBRES.csv
    │   │   │   ├── GARUDA.csv
    │   │   │   ├── GAYAHWS.csv
    │   │   │   ├── GAYAPROJ.csv
    │   │   │   ├── GEECEE.csv
    │   │   │   ├── GENCON.csv
    │   │   │   ├── GENESYS.csv
    │   │   │   ├── GENUSPAPER.csv
    │   │   │   ├── GENUSPOWER.csv
    │   │   │   ├── GEOJITFSL.csv
    │   │   │   ├── GEPIL.csv
    │   │   │   ├── GESHIP.csv
    │   │   │   ├── GFLLIMITED.csv
    │   │   │   ├── GHCL.csv
    │   │   │   ├── GHCLTEXTIL.csv
    │   │   │   ├── GICRE.csv
    │   │   │   ├── GILLANDERS.csv
    │   │   │   ├── GILLETTE.csv
    │   │   │   ├── GINNIFILA.csv
    │   │   │   ├── GIPCL.csv
    │   │   │   ├── GKWLIMITED.csv
    │   │   │   ├── GLAND.csv
    │   │   │   ├── GLAXO.csv
    │   │   │   ├── GLENMARK.csv
    │   │   │   ├── GLFL.csv
    │   │   │   ├── GLOBAL.csv
    │   │   │   ├── GLOBALE.csv
    │   │   │   ├── GLOBUSSPR.csv
    │   │   │   ├── GLOSTERLTD.csv
    │   │   │   ├── GMBREW.csv
    │   │   │   ├── GMDCLTD.csv
    │   │   │   ├── GMRAIRPORT.csv
    │   │   │   ├── GNA.csv
    │   │   │   ├── GNFC.csv
    │   │   │   ├── GODFRYPHLP.csv
    │   │   │   ├── GODIGIT.csv
    │   │   │   ├── GODREJCP.csv
    │   │   │   ├── GODREJIND.csv
    │   │   │   ├── GOENKA.csv
    │   │   │   ├── GOKEX.csv
    │   │   │   ├── GOKULAGRO.csv
    │   │   │   ├── GOLDENTOBC.csv
    │   │   │   ├── GOLDIAM.csv
    │   │   │   ├── GOLDTECH.csv
    │   │   │   ├── GOODLUCK.csv
    │   │   │   ├── GOPAL.csv
    │   │   │   ├── GOYALALUM.csv
    │   │   │   ├── GPIL.csv
    │   │   │   ├── GPPL.csv
    │   │   │   ├── GPTHEALTH.csv
    │   │   │   ├── GPTINFRA.csv
    │   │   │   ├── GRANULES.csv
    │   │   │   ├── GRAPHITE.csv
    │   │   │   ├── GRAVITA.csv
    │   │   │   ├── GREAVESCOT.csv
    │   │   │   ├── GREENLAM.csv
    │   │   │   ├── GREENPANEL.csv
    │   │   │   ├── GREENPLY.csv
    │   │   │   ├── GREENPOWER.csv
    │   │   │   ├── GRINDWELL.csv
    │   │   │   ├── GRINFRA.csv
    │   │   │   ├── GRMOVER.csv
    │   │   │   ├── GROBTEA.csv
    │   │   │   ├── GRPLTD.csv
    │   │   │   ├── GRSE.csv
    │   │   │   ├── GRWRHITECH.csv
    │   │   │   ├── GSFC.csv
    │   │   │   ├── GSLSU.csv
    │   │   │   ├── GSPL.csv
    │   │   │   ├── GSS.csv
    │   │   │   ├── GTECJAINX.csv
    │   │   │   ├── GTL.csv
    │   │   │   ├── GTLINFRA.csv
    │   │   │   ├── GTPL.csv
    │   │   │   ├── GUFICBIO.csv
    │   │   │   ├── GUJALKALI.csv
    │   │   │   ├── GUJAPOLLO.csv
    │   │   │   ├── GUJGASLTD.csv
    │   │   │   ├── GUJRAFFIA.csv
    │   │   │   ├── GUJTHEM.csv
    │   │   │   ├── GULFOILLUB.csv
    │   │   │   ├── GULFPETRO.csv
    │   │   │   ├── GULPOLY.csv
    │   │   │   ├── GVPTECH.csv
    │   │   │   ├── GVT&D.csv
    │   │   │   ├── HAL.csv
    │   │   │   ├── HAPPSTMNDS.csv
    │   │   │   ├── HAPPYFORGE.csv
    │   │   │   ├── HARDWYN.csv
    │   │   │   ├── HARIOMPIPE.csv
    │   │   │   ├── HARRMALAYA.csv
    │   │   │   ├── HARSHA.csv
    │   │   │   ├── HATHWAY.csv
    │   │   │   ├── HATSUN.csv
    │   │   │   ├── HAVELLS.csv
    │   │   │   ├── HBLENGINE.csv
    │   │   │   ├── HBSL.csv
    │   │   │   ├── HCG.csv
    │   │   │   ├── HCL-INSYS.csv
    │   │   │   ├── HCLTECH.csv
    │   │   │   ├── HDFCAMC.csv
    │   │   │   ├── HDFCLIFE.csv
    │   │   │   ├── HDIL.csv
    │   │   │   ├── HEADSUP.csv
    │   │   │   ├── HEG.csv
    │   │   │   ├── HEIDELBERG.csv
    │   │   │   ├── HEMIPROP.csv
    │   │   │   ├── HERANBA.csv
    │   │   │   ├── HERCULES.csv
    │   │   │   ├── HERITGFOOD.csv
    │   │   │   ├── HEROMOTOCO.csv
    │   │   │   ├── HEUBACHIND.csv
    │   │   │   ├── HEXATRADEX.csv
    │   │   │   ├── HEXT.csv
    │   │   │   ├── HFCL.csv
    │   │   │   ├── HGS.csv
    │   │   │   ├── HIKAL.csv
    │   │   │   ├── HILTON.csv
    │   │   │   ├── HINDALCO.csv
    │   │   │   ├── HINDCOMPOS.csv
    │   │   │   ├── HINDCON.csv
    │   │   │   ├── HINDCOPPER.csv
    │   │   │   ├── HINDOILEXP.csv
    │   │   │   ├── HINDUNILVR.csv
    │   │   │   ├── HITECH.csv
    │   │   │   ├── HITECHCORP.csv
    │   │   │   ├── HITECHGEAR.csv
    │   │   │   ├── HLEGLAS.csv
    │   │   │   ├── HLVLTD.csv
    │   │   │   ├── HMAAGRO.csv
    │   │   │   ├── HMT.csv
    │   │   │   ├── HMVL.csv
    │   │   │   ├── HNDFDS.csv
    │   │   │   ├── HONASA.csv
    │   │   │   ├── HONAUT.csv
    │   │   │   ├── HONDAPOWER.csv
    │   │   │   ├── HOVS.csv
    │   │   │   ├── HPAL.csv
    │   │   │   ├── HPIL.csv
    │   │   │   ├── HSCL.csv
    │   │   │   ├── HTMEDIA.csv
    │   │   │   ├── HUHTAMAKI.csv
    │   │   │   ├── ICICIBANK.csv
    │   │   │   ├── ICICIGI.csv
    │   │   │   ├── ICICIPRULI.csv
    │   │   │   ├── ICIL.csv
    │   │   │   ├── ICRA.csv
    │   │   │   ├── IDBI.csv
    │   │   │   ├── IDEA.csv
    │   │   │   ├── IDEAFORGE.csv
    │   │   │   ├── IDFCFIRSTB.csv
    │   │   │   ├── IEL.csv
    │   │   │   ├── IEX.csv
    │   │   │   ├── IFBAGRO.csv
    │   │   │   ├── IFBIND.csv
    │   │   │   ├── IFCI.csv
    │   │   │   ├── IFGLEXPOR.csv
    │   │   │   ├── IGARASHI.csv
    │   │   │   ├── IGIL.csv
    │   │   │   ├── IGL.csv
    │   │   │   ├── IGPL.csv
    │   │   │   ├── IIFLCAPS.csv
    │   │   │   ├── IITL.csv
    │   │   │   ├── IKIO.csv
    │   │   │   ├── IKS.csv
    │   │   │   ├── IL&FSENGG.csv
    │   │   │   ├── IMAGICAA.csv
    │   │   │   ├── IMFA.csv
    │   │   │   ├── IMPAL.csv
    │   │   │   ├── IMPEXFERRO.csv
    │   │   │   ├── INDUSTOWER.csv
    │   │   │   ├── J&KBANK.csv
    │   │   │   ├── KSB.csv
    │   │   │   ├── LODHA.csv
    │   │   │   ├── MAHABANK.csv
    │   │   │   ├── MUTHOOTFIN.csv
    │   │   │   ├── PERSISTENT.csv
    │   │   │   ├── PGHH.csv
    │   │   │   ├── PGHL.csv
    │   │   │   ├── RECLTD.csv
    │   │   │   ├── SBILIFE.csv
    │   │   │   ├── SBIN.csv
    │   │   │   ├── SHRIRAMFIN.csv
    │   │   │   ├── SUZLON.csv
    │   │   │   ├── UNIONBANK.csv
    │   │   │   ├── VBL.csv
    │   │   │   ├── VESUVIUS.csv
    │   │   │   └── WIPRO.csv
    │   │   ├── planner_agent.py
    │   │   │   Imports:
    │   │   │     - agents.execution.execution_agent_sql.ExecutionAgent
    │   │   │     - agents.memory.feedback_loop.update_training_data
    │   │   │     - agents.memory.memory_agent.MemoryAgent
    │   │   │     - agents.strategy.strategy_agent.StrategyAgent
    │   │   │     - config.paths.PATHS
    │   │   │     - core.data_provider.data_provider.load_data
    │   │   │     - core.data_provider.data_provider.save_data
    │   │   │     - core.logger.logger.logger
    │   │   │     - datetime.datetime
    │   │   │     - fundamentals.fundamental_data_extractor
    │   │   │     - models.run_stock_filter.run_stock_filter
    │   │   │     - os
    │   │   │     - pandas
    │   │   │     - stock_selecter.auto_filter_selector.auto_select_filter
    │   │   │     - utils.file_io.save_dataframe
    │   │   │   Class: PlannerAgent
    │   │   │     Methods:
    │   │   │       - __init__
    │   │   │       - run_weekly_routine
    │   │   └── train_dual_model.py
    │   │       Imports:
    │   │         - config.paths.PATHS
    │   │         - core.logger.logger.logger
    │   │         - core.model_io.load_model
    │   │         - core.model_io.save_model
    │   │         - json
    │   │         - os
    │   │         - pandas
    │   │         - pickle
    │   │         - sklearn.ensemble.RandomForestClassifier
    │   │         - sklearn.ensemble.RandomForestRegressor
    │   │         - sklearn.metrics.classification_report
    │   │         - sklearn.metrics.mean_squared_error
    │   │         - sklearn.model_selection.train_test_split
    │   │         - sklearn.preprocessing.LabelEncoder
    │   │         - utils.file_io.load_dataframe
    │   │       Function: train_dual_models
    │   ├── check_data_completeness.py
    │   │   Imports:
    │   │     - core.skiplist.skiplist.get_skiplist
    │   ├── check_db_orm_match.py
    │   │   Imports:
    │   │     - db.models.Base
    │   │     - os
    │   │     - sqlalchemy.create_engine
    │   │     - sqlalchemy.inspect
    │   │   Function: check_schema
    │   ├── enqueue_backfill_jobs.py
    │   │   Imports:
    │   │     - db.postgres_manager.get_all_symbols
    │   │     - json
    │   │     - os
    │   │     - redis
    │   ├── fetch_instruments.py
    │   │   Imports:
    │   │     - integrations.zerodha_client.get_kite
    │   │     - pandas
    │   ├── fix_logger_shadowing.py
    │   │   Imports:
    │   │     - os
    │   │     - re
    │   │   Function: process_file
    │   │   Function: scan_project
    │   ├── generate_token.py
    │   │   Imports:
    │   │     - dotenv.load_dotenv
    │   │     - dotenv.set_key
    │   │     - json
    │   │     - kiteconnect.KiteConnect
    │   │     - os
    │   │     - webbrowser
    │   ├── init_db.py
    │   │   Imports:
    │   │     - db.db.engine
    │   │     - db.models.Base
    │   ├── load_backup_fundamentals.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.save_data
    │   │     - pandas
    │   ├── prefill_price_history.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.fetch_stock_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.logger.logger.logger
    │   │     - datetime.datetime
    │   │     - integrations.zerodha_fetcher.INTERVAL_LIMIT_DAYS
    │   │     - pandas
    │   │     - pathlib.Path
    │   │   Function: load_symbols
    │   │   Function: prefill_all
    │   ├── reset_system.py
    │   │   Imports:
    │   │     - argparse
    │   │     - core.logger.logger.logger
    │   │     - db.db_router.run_query
    │   │     - os
    │   │     - pathlib.Path
    │   │     - shutil
    │   │     - sys
    │   │   Function: drop_partitioned_feature_tables
    │   │   Function: delete_model_files
    │   │   Function: clear_cache_dirs
    │   │   Function: main
    │   ├── seed_training_data.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.logger.logger.logger
    │   │     - pandas
    │   │   Function: seed_training_data
    │   ├── update_prices.py
    │   │   Imports:
    │   │     - core.data_provider.data_provider.cache_price
    │   │     - core.price_service.get_prices
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - db.postgres_manager.get_all_symbols
    │   └── validate_duckdb_feature_coverage.py
    │       Imports:
    │         - core.feature_store.feature_store.get_cached_features
    │         - core.logger.logger.logger
    │         - datetime.datetime
    │         - datetime.timedelta
    │         - pandas
    │       Function: get_recent_dates
    │       Function: validate_duckdb_cache
    ├── selected_stock_summary.csv
    ├── services
    │   └── exit_policy_evaluator.py
    │       Imports:
    │         - core.feature_engineering.feature_enricher_multi.enrich_multi_interval_features
    │         - core.logger.logger.logger
    │         - core.model_io.load_model
    │         - core.time_context.time_context.get_simulation_date
    │         - numpy
    │         - pandas
    │         - pydantic.BaseModel
    │         - traceback
    │         - typing.Literal
    │         - typing.Optional
    │       Class: ExitRule
    │       Function: get_exit_probability
    │         Docstring:
    │           Return probability that the position should be exited
    │           (1 = exit).
    │       Function: should_exit_model_based
    ├── stock_features_15m.sql
    ├── stock_features_60m.sql
    ├── stock_selecter
    │   ├── auto_filter_selector.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - datetime.datetime
    │   │     - os
    │   │     - pandas
    │   │     - stock_selecter.fallback_technical_filter.run_technical_filter
    │   │     - stock_selecter.stock_screener.run_stock_filter
    │   │   Function: auto_select_filter
    │   ├── fallback_technical_filter.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.data_provider.data_provider.save_data
    │   │     - core.logger.logger.logger
    │   │     - core.time_context.time_context.get_simulation_date
    │   │     - datetime.datetime
    │   │     - pandas
    │   │   Function: run_technical_filter
    │   ├── filter_usage_log.csv
    │   ├── filtered_stocks.csv
    │   └── stock_screener.py
    │       Imports:
    │         - core.config.config.settings
    │         - core.data_provider.data_provider.load_data
    │         - core.data_provider.data_provider.save_data
    │         - core.logger.logger.logger
    │         - core.time_context.time_context.get_simulation_date
    │         - datetime.datetime
    │         - pandas
    │       Function: filter_growth_stocks
    │       Function: filter_value_stocks
    │       Function: filter_momentum_stocks
    │       Function: filter_defensive_stocks
    │       Function: filter_small_cap_gems
    │       Function: filter_high_volatility_stocks
    │       Function: run_stock_filter
    │         Docstring:
    │           1) Load fundamentals 2) Apply filter_name 3) Persist
    │           only 'stock' (+ timestamp) back to SQL
    │       Function: get_stock_list
    │         Docstring:
    │           Read back the ML-selected table for downstream use.
    ├── tracking_progress.md
    ├── tracking_progress_old.md
    ├── training
    │   ├── run_ppo_training.py
    │   │   Imports:
    │   │     - core.rl.gym_env.ODINTradingEnv
    │   │     - core.rl.ppo_trainer.PPOTrainer
    │   │     - core.rl.sql_env.ODINSQLTradingEnv
    │   │     - time
    │   ├── train_joint_policy.py
    │   │   Imports:
    │   │     - core.config.config.settings
    │   │     - core.data_provider.data_provider.load_data
    │   │     - core.feature_engineering.feature_provider.fetch_features
    │   │     - core.logger.logger.logger
    │   │     - datetime.timedelta
    │   │     - models.joint_policy.JointPolicyModel
    │   │     - pandas
    │   │   Function: load_training_data
    │   │   Function: sample_negative_examples
    │   │   Function: fetch_feature_data
    │   │   Function: train_model
    │   │   Function: main
    │   └── train_sb3_ppo.py
    │       Imports:
    │         - core.rl.sql_env.ODINSQLTradingEnv
    │         - os
    │         - stable_baselines3.PPO
    │         - stable_baselines3.common.monitor.Monitor
    │         - stable_baselines3.common.vec_env.DummyVecEnv
    │       Function: make_env
    └── utils
        ├── cache.py
        │   Function: is_skipped
        ├── file_io.py
        │   Imports:
        │     - core.logger.logger.logger
        │     - os
        │     - pandas
        │   Function: load_dataframe
        │   Function: save_dataframe
        ├── precheck_features.py
        │   Imports:
        │     - config.paths.PATHS
        │     - core.data_provider.data_provider.load_data
        │     - core.feature_generator.generate_features
        │     - core.logger.logger.logger
        │     - core.model_io.load_model
        │     - datetime.datetime
        │     - json
        │     - os
        │     - pandas
        │   Function: get_model_features
        │   Function: is_feature_usable
        │   Function: prefilter_valid_stocks
        ├── progress_logger.py
        │   Imports:
        │     - datetime.datetime
        │     - sqlite3
        │   Function: log_model_progress
        ├── sql_utils.py
        │   Imports:
        │     - config.sql_tables.SQL_TABLES
        │   Function: is_sql_table
        ├── stock_health_precheck.py
        │   Imports:
        │     - core.data_provider.data_provider.load_data
        │     - core.logger.logger.logger
        │   Function: is_stock_tradeable
        ├── stock_precheck.py
        │   Imports:
        │     - config.paths.PATHS
        │     - core.feature_generator.generate_features
        │     - core.logger.logger.logger
        │     - core.model_io.load_model
        │   Function: is_feature_ready
        │   Function: filter_valid_stocks
        ├── technical_indicators.py
        │   Imports:
        │     - pandas
        │   Function: compute_sma
        │   Function: compute_rsi
        └── time_utils.py
            Imports:
              - datetime.datetime
              - pandas
              - pytz.timezone
            Function: to_naive_utc
            Function: to_ist
              Docstring:
                Converts datetime column to IST (timezone-aware).
            Function: localize_if_needed
            Function: make_naive
              Docstring:
                Converts a single datetime to naive UTC.
            Function: ensure_df_naive_utc
            Function: assert_naive
            Function: make_naive_index
              Docstring:
                Forces a datetime index to be offset-naive.
            Function: to_naive_utc_timestamp
            Function: to_naive_datetime